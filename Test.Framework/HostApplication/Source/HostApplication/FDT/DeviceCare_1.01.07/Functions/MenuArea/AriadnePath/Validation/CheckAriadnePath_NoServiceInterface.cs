///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace EH.PCPS.TestAutomation.DeviceCare.V10107.Functions.MenuArea.AriadnePath.Validation
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The CheckAriadnePath_NoServiceInterface recording.
    /// </summary>
    [TestModule("fd3533dd-b78f-4cfc-a6b0-679a07eba530", ModuleType.Recording, 1)]
    public partial class CheckAriadnePath_NoServiceInterface : ITestModule
    {
        /// <summary>
        /// Holds an instance of the EH.PCPS.TestAutomation.DeviceCare.V10107.GUI.DeviceCareApplication repository.
        /// </summary>
        public static EH.PCPS.TestAutomation.DeviceCare.V10107.GUI.DeviceCareApplication repo = EH.PCPS.TestAutomation.DeviceCare.V10107.GUI.DeviceCareApplication.Instance;

        static CheckAriadnePath_NoServiceInterface instance = new CheckAriadnePath_NoServiceInterface();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public CheckAriadnePath_NoServiceInterface()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static CheckAriadnePath_NoServiceInterface Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "6.1")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath'.", repo.DeviceCare.MenuArea.AriadnePath.SelfInfo, new RecordItemIndex(0));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.SelfInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(0)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Protocol'.", repo.DeviceCare.MenuArea.AriadnePath.ProtocolInfo, new RecordItemIndex(1));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.ProtocolInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Text_Protocol'.", repo.DeviceCare.MenuArea.AriadnePath.Text_ProtocolInfo, new RecordItemIndex(2));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.Text_ProtocolInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(2)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Modem'.", repo.DeviceCare.MenuArea.AriadnePath.ModemInfo, new RecordItemIndex(3));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.ModemInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(3)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Text_Modem'.", repo.DeviceCare.MenuArea.AriadnePath.Text_ModemInfo, new RecordItemIndex(4));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.Text_ModemInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(4)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Configuration'.", repo.DeviceCare.MenuArea.AriadnePath.ConfigurationInfo, new RecordItemIndex(5));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.ConfigurationInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Text_Configuration'.", repo.DeviceCare.MenuArea.AriadnePath.Text_ConfigurationInfo, new RecordItemIndex(6));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.Text_ConfigurationInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.ScanResult'.", repo.DeviceCare.MenuArea.AriadnePath.ScanResultInfo, new RecordItemIndex(7));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.ScanResultInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                Report.Log(ReportLevel.Info, "Validation", "(Optional Action)\r\nValidating AttributeEqual (Visible='True') on item 'DeviceCare.MenuArea.AriadnePath.Text_ScanResult'.", repo.DeviceCare.MenuArea.AriadnePath.Text_ScanResultInfo, new RecordItemIndex(8));
                Validate.Attribute(repo.DeviceCare.MenuArea.AriadnePath.Text_ScanResultInfo, "Visible", "True", Validate.DefaultMessage, false);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
