<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EH.PCPS.TestAutomation.DeviceFunctionInterfaces</name>
    </assembly>
    <members>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICheckDeviceTypeName">
            <summary>
            The CheckDeviceTypeName interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICheckDeviceTypeName.Run">
            <summary>
            Gets the device type name from the device type information box and checks if it is valid.
            </summary>
            <returns>
            True: if the device type name is valid; False: if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICheckSetupVersion">
            <summary>
            The CheckSetupVersion interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICheckSetupVersion.Run">
            <summary>
            Gets the setup version from the setup information box and checks if it is valid.
            </summary>
            <returns>
            True: if the setup version is valid; False: if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICloseModule">
            <summary>
            The CloseModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.IOpenModule">
            <summary>
            The OpenModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.IOpenModule.Run">
            <summary>
            Open module via frame menu within a default time
            </summary>
             <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.IOpenModule.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ISaveClipboardDataToFile">
            <summary>
            The SaveClipboardDataToFile interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ISaveClipboardDataToFile.Run">
            <summary>
            Saves the clipboard data with default path and file name
            </summary>
            <returns>
            True if file is saved; False otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ISaveClipboardDataToFile.Run(System.String)">
            <summary>
            Saves the clipboard data to a file with a default file name on the desktop (File name = actual date and time + AboutBox.txt).
            </summary>
            <param name="filePath">
            The file path including the file name i.e. "C:\Test\AboutBoxMicropilot.txt"
            </param>
            <returns>
            True if file is saved; False otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ISaveClipboardDataToReport">
            <summary>
            The SaveClipboardDataToReport interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Flows.ISaveClipboardDataToReport.Run">
            <summary>
            Saves the clipboard data to report.
            </summary>
            <returns>
            True if successful; False otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.ICopyToClipboard">
            <summary>
            The CopyToClipboard interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.ICopyToClipboard.Run">
            <summary>
            Starts execution
            </summary>
            <returns>
            true if button is found and clicked, false if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDeviceTypeInformation">
            <summary>
            The GetDeviceTypeInformation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDeviceTypeInformation.Name">
            <summary>
            Device Type Information -> Name
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDeviceTypeInformation.Version">
            <summary>
            Device Type Information -> Version
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDeviceTypeInformation.Date">
            <summary>
            Device Type Information -> Date
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDtmInformation">
            <summary>
            The GetDTMInformation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDtmInformation.Name">
            <summary>
            DTM Information -> Name
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDtmInformation.Version">
            <summary>
            DTM Information -> Version
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetDtmInformation.Date">
            <summary>
            DTM Information -> Date
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetSetupInformation">
            <summary>
            The GetSetupInformation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetSetupInformation.Name">
            <summary>
            Setup Information -> Name
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetSetupInformation.Version">
            <summary>
            Setup Information -> Version
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.IGetSetupInformation.Manufacturer">
            <summary>
            Setup Information -> Manufacturer
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsDeviceTypeNameCorrect">
            <summary>
            The IsDeviceTypeNameCorrect interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsDeviceTypeNameCorrect.Run(System.String)">
            <summary>
            Checks whether a device type name matches the pattern [x]x.[x]x.[x]x.xxxx 
            </summary>
            <param name="deviceTypeName">
            The device type name
            </param>
            <returns>
            True: if setup version matches pattern; False: otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
            The IsModuleReady interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.Run">
            <summary>
            Checks if button [About] is available
            </summary>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsSetupVersionCorrect">
            <summary>
            The IsSetupVersionCorrect interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IIsSetupVersionCorrect.Run(System.String)">
            <summary>
            Checks whether a setup version matches the pattern [x]x.[x]x.[x]x.xxxx 
            </summary>
            <param name="setupVersion">
            The setup version.
            </param>
            <returns>
            True: if setup version matches pattern; False: otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
            The ModuleOpeningAndClosing interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleIsReady">
            <summary>
            The WaitUntilModuleIsReady interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.AboutBox.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleIsReady.Run(System.Int32)">
            <summary>
                Validation if module is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICancelCompare">
            <summary>
            Interface ICancelCompare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICancelCompare.Run(System.Int32)">
            <summary>
            Starts compare, then cancels it after a specified time
            </summary>
            <param name="timeToWaitUntilCancelInMilliseconds">
            The time to wait until the comparison is canceled in milliseconds.
            </param>
            <returns>
            <c>true</c> if compare is canceled successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult">
            <summary>
            The CheckCompareResult interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult.CheckThatOfflineAndOnlineParameterAreEqual(System.Collections.Generic.List{System.String})">
            <summary>
            Checks whether the offline and online value of a parameter are identical.
            </summary>
            <param name="parameterNames">
            List with the name(s) of the parameter which will be checked. E.g. Full calibration (4), Empty calibration (3), Device tag.
            </param>
            <returns>
            <c>true</c> if the offline and online values of all parameter are identical, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult.CheckThatOfflineAndOnlineParameterAreNotEqual(System.Collections.Generic.List{System.String})">
            <summary>
            Checks whether the offline and online value of a parameter are not equal.
            </summary>
            <param name="parameterNames">
            List with the name(s) of the parameter which will be checked. E.g. Full calibration (4), Empty calibration (3), Device tag.
            </param>
            <returns>
            <c>true</c> if the offline and online values of all parameter from the list are not identical, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult.LogAllParameterWithDifferentOfflineAndOnlineValues">
            <summary>
            Navigates through the Compare result and logs all parameter with different offline and online values. Result is shown in the report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult.LogAllParameterWithIdenticalOfflineAndOnlineValues">
            <summary>
            Navigates through the Compare result and logs all parameter with identical offline and online values. Result is shown in the report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICheckCompareResult.LogAllParameterWithOfflineAndOnlineValues">
            <summary>
            Navigates through the Compare result and logs all parameter with offline and online values. Result is shown in the report.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICloseModule">
            <summary>
                Provides methods for flow ICloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICloseModule.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICompare">
            <summary>
                Provides methods for flow ICompare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ICompare.Run(System.Int32)">
            <summary>
                Methods to start comparison and wait until its finished
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset1">
            <summary>
                Interface for flow Load Dataset 1
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset1.Run">
            <summary>
            Flow: Load default file from report folder
            </summary>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>s>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset1.Run(System.String)">
            <summary>
            Start flow
            </summary>
            <param name="fileName">
            Dataset to load
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset2">
            <summary>
                Interface for flow Load Dataset 2
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset2.Run">
            <summary>
            Flow: Load default file from report folder
            </summary>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>s>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ILoadDataset2.Run(System.String)">
            <summary>
            Start flow
            </summary>
            <param name="fileName">
            Dataset to load
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a specified time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a specified time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ISelectMode">
            <summary>
                Interface for SelectMode
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ISelectMode.Run(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Flows.ISelectMode.Run(System.String)">
            <summary>
            
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IAction">
            <summary>
                Provides interfaces for action area at module Compare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IAction.StartCompare">
            <summary>
                Starts comparing by clicking related button
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IAction.CancelCompare">
            <summary>
                Cancels comparing by clicking related button
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for flow ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IGetAllCompareResultParameter">
            <summary>
            The GetAllCompareResultParameter interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IGetAllCompareResultParameter.Run">
            <summary>
            Navigates through the Compare results tree and stores every parameter in a list. A parameter contains its name, the offline and online value.
            </summary>
            <returns>A list containing the Compare result parameter.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for flow IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection">
            <summary>
                Provides interfaces for action area at module Compare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.Entries">
            <summary>
                Get list of listitems after compare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.OpenSelectMode">
            <summary>
                Open mode selection
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.SelectMode(System.Int32)">
            <summary>
                Flow: Select compare mode
            </summary>
            <param name="index">Entry to select, starting with 0</param>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.SelectMode(System.String)">
            <summary>
                Select Mode via text, returns true when mode is set
            </summary>
            <param name="mode">Entry to select</param>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.Dataset1">
            <summary>
                Open file browser for dataset 1
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ISelection.Dataset2">
            <summary>
                Open file browser for dataset 2
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IComparisonProgress">
            <summary>
                Provides interface for checking comparison progress
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IComparisonProgress.WaitUntilCompareFinished(System.Int32)">
            <summary>
                Wait until compare is finished within a speficied time
            </summary>
            <param name="timeOutInMilliseconds">Time within action must be finished</param>
            <returns>
                <br>True: if comparison is finished in time</br>
                <br>False: if comparison is not finished in time</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IComparisonProgress.IsComparing">
            <summary>
                Checks if comparison is finished
            </summary>
            <returns>
                <br>True: if comparison is finished</br>
                <br>False: if comparison is not finished</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Interface of WaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Interface of WaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Interface of IsDTMConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Interface for validation IsDTMDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
                Interface for WaitUntilDTMIsConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
                Interface for WaitUntilDTMIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Compare.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICalculate">
            <summary>
                Description of ICalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICalculate.Run">
            <summary>
            Starts calculation via icon, waits until calculation is finished
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICheckExpertResults">
            <summary>
            The CheckExpertResults interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICheckExpertResults.SelectEachResultAndTakeScreenshot">
            <summary>
            Selects each result from the combo box and takes a screenshot of the diagram
            </summary>
            <returns><c>true</c> if execution was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICloseModule">
            <summary>
                Interface of CloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureBaseSettings">
            <summary>
                Description of IConfigureBaseSettings.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureBaseSettings.AveragePressure(System.String,System.String)">
            <summary>
            Averages the pressure.
            </summary>
            <param name="averageProcessPressure">
            The average process pressure.
            </param>
            <param name="averageProcessPressureUnit">
            The average process pressure unit.
            </param>
            <returns>
            <c>true</c> if configured correctly, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureBaseSettings.BaseConfiguration(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Bases the configuration.
            </summary>
            <param name="calculationBase">The calculation base.</param>
            <param name="liquidType">Type of the liquid.</param>
            <param name="userProfile">The user profile.</param>
            <param name="referenceTemperature">The reference temperature.</param>
            <param name="mineralContent">Content of the mineral.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureBaseSettings.OperatingRange(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures operating range
            </summary>
            <param name="temperatureMinimum">
            The temperature minimum.
            </param>
            <param name="temperatureMaximum">
            The temperature maximum.
            </param>
            <param name="concentrationMinimum">
            The concentration minimum.
            </param>
            <param name="concentrationMaximum">
            The concentration maximum.
            </param>
            <param name="temperatureUnit">
            The temperature unit.
            </param>
            <param name="concentrationUnit">
            The concentration unit.
            </param>
            <returns>
            <c>true</c> if configured correctly, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureExpertResults">
            <summary>
            The ConfigureExpertResults interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureExpertResults.Run(System.String,System.String,System.String,System.String)">
            <summary>
            Runs the specified density calibration.
            </summary>
            <param name="densityCalibration">
            The density calibration.
            </param>
            <param name="sensor">
            The sensor.
            </param>
            <param name="fieldDensityAdjustment">
            The field density adjustment.
            </param>
            <param name="diagramSelection">
            The diagram selection.
            </param>
            <returns>
            <c>true</c> if configured, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureLiquidProperties">
            <summary>
                Description of IConfigureLiquidProperties.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureLiquidProperties.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures tab Liquid Properties. To skip a parameter, use an empty string.
            </summary>
            <param name="inputFormat">
            The input format.
            </param>
            <param name="spreadsheet">
            The spreadsheet.
            </param>
            <param name="column1Selection">
            The column1 selection.
            </param>
            <param name="column1Minimum">
            The column1 minimum.
            </param>
            <param name="column1Max">
            The column1 maximum.
            </param>
            <param name="column1Unit">
            The column1 unit.
            </param>
            <param name="column2Selection">
            The column2 selection.
            </param>
            <param name="column2Minimum">
            The column2 minimum.
            </param>
            <param name="column2Max">
            The column2 maximum.
            </param>
            <param name="column2Unit">
            The column2 unit.
            </param>
            <param name="column3Selection">
            The column3 selection.
            </param>
            <param name="column3Minimum">
            The column3 minimum.
            </param>
            <param name="column3Max">
            The column3 maximum.
            </param>
            <param name="column3Unit">
            The column3 unit.
            </param>
            <returns>
            <c>true</c> if configured, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureLiquidProperties.Run(System.String,System.String,System.String)">
            <summary>
            Configures tab Liquid Properties when Fine Tuning is activated. To skip a parameter, use an empty string.
            </summary>
            <param name="fineTuningValue1Unit">The fine tuning value1 unit.</param>
            <param name="fineTuningValue2Unit">The fine tuning value2 unit.</param>
            <param name="fineTuningValue3Unit">The fine tuning value3 unit.</param>
            <returns><c>true</c> if configured, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureReferenceValues">
            <summary>
            The ConfigureReferenceValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IConfigureReferenceValues.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Runs the specified carrier type.
            </summary>
            <param name="carrierType">
            Type of the carrier.
            </param>
            <param name="referenceTemperature">
            The reference temperature.
            </param>
            <param name="densityUnit">
            The density unit.
            </param>
            <param name="carrierLinearExpansionCoefficient">
            The carrier linear expansion coefficient.
            </param>
            <param name="carrierSquareExpansionCoefficientTarget">
            The carrier square expansion coefficient target.
            </param>
            <param name="carrierReferenceDensity">
            The carrier reference density.
            </param>
            <param name="targetLinearExpansionCoefficient">
            The target linear expansion coefficient.
            </param>
            <param name="targetSquareExpansionCoefficientTarget">
            The target square expansion coefficient target.
            </param>
            <param name="targetReferenceDensity">
            The target reference density.
            </param>
            <returns>
            <c>true</c> if configured, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IExport">
            <summary>
                Description of IExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IExport.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IExport.Run(System.String)">
            <summary>
            Exports Concentration data with user given filename
            </summary>
            <param name="filename">
            Filename for Concentration Data
            </param>
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IHelp">
            <summary>
                Description of IHelp.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IImport">
            <summary>
                Description of IImport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IImport.Run">
            <summary>
            Imports Concentration data with default name from report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IImport.Run(System.String)">
            <summary>
            Runs the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ILoad">
            <summary>
                Description of ILoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ILoad.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ILoad.Run(System.String)">
            <summary>
            load a file with specified file name, check whether user notification message in status bar contains "Data loaded successfully"
            </summary>
            <param name="fileName">
            User specified filename
            </param>
            <returns>
            true: if loading was successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.INew">
            <summary>
                Description of INew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.INew.Run">
            <summary>
            Clears Concentration data via New button, checks whether coefficients in coefficients overview are empty
            </summary>
            <returns>true: if Concentration data is cleared; false: if an error occurred</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOffline">
            <summary>
                Interface of OpenModuleOffline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOffline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOnline">
            <summary>
                Interface of OpenModuleOnline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IRead">
            <summary>
                Description of IRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IRead.Run">
            <summary>
                Reads coefficients from device, waits until "read finished" user notification message is displayed and read icon is enabled again
            </summary>
            <returns>
                true: if coefficients were read
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISave">
            <summary>
                Description of ISave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISave.Run">
            <summary>
                Saves current Viscosity data via Save button
            </summary>
            <returns>
                true: if call worked fine
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISaveAs">
            <summary>
                Description of ISaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISaveAs.Run(System.String)">
            <summary>
            Saves file under given filename, replaces already existing files with same filename
                FILE WATCHER will check if file has been created or modified
                Default on drive C:
            </summary>
            <param name="fileName">
            Filename under which file is saved
            </param>
            <returns>
            true: if file was saved successful
                false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISaveAs.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISetCoefficientsFromDevice">
            <summary>
            Interface ISetCoefficientsFromDevice
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.ISetCoefficientsFromDevice.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Runs the specified a0.
            </summary>
            <param name="a0">The a0.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
            <param name="a3">The a3.</param>
            <param name="a4">The a4.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="b3">The b3.</param>
            <param name="d1">The d1.</param>
            <param name="d2">The d2.</param>
            <param name="d3">The d3.</param>
            <param name="d4">The d4.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IWrite">
            <summary>
                Description of IWrite.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Flows.IWrite.Run">
            <summary>
                writes coefficients to device, waits until "write finished" user notification message is displayed and write button is enabled again
            </summary>
            <returns>
                true: if coefficients were written
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings">
            <summary>
                Provides interfaces tab base settings within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.AverageProcessPressure">
            <summary>
            Gets or sets the average process pressure.
            </summary>
            <value>The average process pressure.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.AverageProcessPressureUnit">
            <summary>
            Gets or sets the average process pressure unit.
            </summary>
            <value>The average process pressure unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.CalculationBase">
            <summary>
            Gets or sets the calculation base.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationMax">
            <summary>
            Gets or sets the concentration max.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationMin">
            <summary>
            Gets or sets the concentration min.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationUnit">
            <summary>
            Gets or sets the concentration unit.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.DensityCalibration">
            <summary>
            Gets or sets the density calibration.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.FieldDensityAdjustment">
            <summary>
            Gets or sets the field density adjustment.
            </summary>
            <value>
            The field density adjustment.
            </value>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.LiquidType">
            <summary>
            Gets or sets the liquid type.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.MineralContent">
            <summary>
            Gets or sets the content of the mineral.
            </summary>
            <value>The content of the mineral.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ReferenceTemperature">
            <summary>
            Gets or sets the reference temperature.
            </summary>
            <value>The reference temperature.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.Sensor">
            <summary>
            Gets or sets the sensor.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureMax">
            <summary>
            Gets or sets the temperature max.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureMin">
            <summary>
            Gets or sets the temperature min.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IBaseSettings.UserProfile">
            <summary>
            Gets or sets the user profile.
            </summary>
            <value>The user profile.</value>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Description of ICloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Close module via tab at related tab control
            </summary>
            <param name="moduleToClose">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview">
            <summary>
                Provides methods for tab coefficients overview within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA0">
            <summary>
            Gets or sets the calculated a 0.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA1">
            <summary>
            Gets or sets the calculated a 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA2">
            <summary>
            Gets or sets the calculated a 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA3">
            <summary>
            Gets or sets the calculated a 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA4">
            <summary>
            Gets or sets the calculated a 4.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB1">
            <summary>
            Gets or sets the calculated b 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB2">
            <summary>
            Gets or sets the calculated b 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB3">
            <summary>
            Gets or sets the calculated b 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedD1">
            <summary>
            Gets or sets the calculated d1.
            </summary>
            <value>The calculated d1.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedD2">
            <summary>
            Gets or sets the calculated d2.
            </summary>
            <value>The calculated d2.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedD3">
            <summary>
            Gets or sets the calculated d3.
            </summary>
            <value>The calculated d3.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedD4">
            <summary>
            Gets or sets the calculated d4.
            </summary>
            <value>The calculated d4.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA0">
            <summary>
            Gets or sets the from device a 0.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA1">
            <summary>
            Gets or sets the from device a 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA2">
            <summary>
            Gets or sets the from device a 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA3">
            <summary>
            Gets or sets the from device a 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA4">
            <summary>
            Gets or sets the from device a 4.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB1">
            <summary>
            Gets or sets the from device b 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB2">
            <summary>
            Gets or sets the from device b 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB3">
            <summary>
            Gets or sets the from device b 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceD1">
            <summary>
            Gets or sets the from device D1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceD2">
            <summary>
            Gets or sets the from device D2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceD3">
            <summary>
            Gets or sets the from device D3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceD4">
            <summary>
            Gets or sets the from device D4.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreCalculatedCoefficientsAvailable">
            <summary>
                Checks whether calculated Coefficients are available or not
            </summary>
            <returns>
                true: if at least one value is not empty
                false: if all values are empty
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreCoefficientsAvailable">
            <summary>
                Checks whether Coefficients are available or not
            </summary>
            <returns>
                true: if at least one coefficient is not "0"
                false: if all values are "0"
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreReadCoefficientsAvailable">
            <summary>
                Checks whether Coefficients read from device are available or not
            </summary>
            <returns>
                true: if at least one value is not empty
                false: if all values are empty
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.String)">
            <summary>
            Compares all calculated coefficients against the coefficients read from device
            </summary>
            <param name="accuracy">
            maximum difference between two coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.Double)">
            <summary>
            Compares all calculated coefficients against the coefficients read from device
            </summary>
            <param name="accuracy">
            maximum difference between two coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.String,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.Double,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficientsFromDevice(System.String,System.String[])">
            <summary>
            Compares all coefficients from device against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficientsFromDevice(System.Double,System.String[])">
            <summary>
            Compares all coefficients from device against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICommonMethods">
            <summary>
                Provides methods for tab liquid properties within module concentration
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetParameterValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a specific control to a specific value
            </summary>
            <param name="element">control to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICommonMethods.GetParameterValue(Ranorex.Core.Element)">
            <summary>
                Get value of a specific control
            </summary>
            <param name="element">control to get the value from</param>
            <returns>
                <br>String: if everything worked fine</br>
                <br>Emptry String: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetTextValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a text control to a specified value
            </summary>
            <param name="element">parameter to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetComboBoxValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a comboBox control to a specified value
            </summary>
            <param name="element">parameter to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer">
            <summary>
                Provides methods to select different tabs within module concentration
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabBaseSettings">
            <summary>
                Select tab base settings
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabCoefficientsOverview">
            <summary>
                Select tab coefficients overview
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabExpertResults">
            <summary>
                Select tab expert results
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabLiquidProperties">
            <summary>
                Select tab liquid properties
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabReferenceValues">
            <summary>
            Selects the tab reference values.
            </summary>
            <returns><c>true</c> if tab selected, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults">
            <summary>
                Provides methods for tab expert results within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults.DensityCalibration">
            <summary>
            Gets or sets the density calibration.
            </summary>
            <value>The density calibration.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults.Diagram">
            <summary>
            Gets or sets the diagram.
            </summary>
            <value>The diagram.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults.Sensor">
            <summary>
            Gets or sets the sensor.
            </summary>
            <value>The sensor.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults.FieldDensityAdjustment">
            <summary>
            Gets or sets the field density adjustment.
            </summary>
            <value>The field density adjustment.</value>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IExpertResults.GetDiagramImage">
            <summary>
                Get diagram image
            </summary>
            <returns>
                <br>True: if screenshot could be made</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable">
            <summary>
            The GetValuesFromTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.AllValues">
            <summary>
            Gets all values from Concentration table within Liquid properties and stores them in a list. This will only work if you selected List as input form.
            </summary>
            <returns>List with all table values.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.PrintAllValuesInReport">
            <summary>
            Prints table values in report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.SingleValue(System.Int32,System.Int32)">
            <summary>
            Returns the value for a specified row and column
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <returns>
            The value for the row and column.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties">
            <summary>
                Provides methods for tab liquid properties within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.FineTuningValue1Unit">
            <summary>
            Gets or sets the fine tuning value1 unit.
            </summary>
            <value>The fine tuning value1 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.FineTuningValue2Unit">
            <summary>
            Gets or sets the fine tuning value2 unit.
            </summary>
            <value>The fine tuning value2 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.FineTuningValue3Unit">
            <summary>
            Gets or sets the fine tuning value3 unit.
            </summary>
            <value>The fine tuning value3 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.InputFormat">
            <summary>
            Gets or sets the input format.
            </summary>
            <value>The input format.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Spreadsheet">
            <summary>
            Gets or sets the spreadsheet.
            </summary>
            <value>The spreadsheet.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1">
            <summary>
            Gets or sets the value1.
            </summary>
            <value>The value1.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Max">
            <summary>
            Gets or sets the value1 maximum.
            </summary>
            <value>The value1 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Min">
            <summary>
            Gets or sets the value1 minimum.
            </summary>
            <value>The value1 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Unit">
            <summary>
            Gets or sets the value1 unit.
            </summary>
            <value>The value1 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2">
            <summary>
            Gets or sets the value2.
            </summary>
            <value>The value2.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Max">
            <summary>
            Gets or sets the value2 maximum.
            </summary>
            <value>The value2 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Min">
            <summary>
            Gets or sets the value2 minimum.
            </summary>
            <value>The value2 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Unit">
            <summary>
            Gets or sets the value2 unit.
            </summary>
            <value>The value2 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3">
            <summary>
            Gets or sets the value3.
            </summary>
            <value>The value3.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Max">
            <summary>
            Gets or sets the value3 maximum.
            </summary>
            <value>The value3 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Min">
            <summary>
            Gets or sets the value3 minimum.
            </summary>
            <value>The value3 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Unit">
            <summary>
            Gets or sets the value3 unit.
            </summary>
            <value>The value3 unit.</value>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Recalculate">
            <summary>
            The Recalculate
            </summary>
            <returns>True for success, False for error</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.FillList">
            <summary>
                Fills list with random numbers between 0-100
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Description of IOpenModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Open module via frame menu within a specific time
            </summary>
            <param name="moduleToOpen">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues">
            <summary>
            Interface IReferenceValues
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.LinearExpansionCoefficientTarget">
            <summary>
            Gets or sets the linear expansion coefficient target.
            </summary>
            <value>The linear expansion coefficient target.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.LinearExpansionCoefficientCarrier">
            <summary>
            Gets or sets the linear expansion coefficient carrier.
            </summary>
            <value>The linear expansion coefficient carrier.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.SugarExpansionCoefficientCarrier">
            <summary>
            Gets or sets the sugar expansion coefficient carrier.
            </summary>
            <value>The sugar expansion coefficient carrier.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.SugarExpansionCoefficientTarget">
            <summary>
            Gets or sets the sugar expansion coefficient target.
            </summary>
            <value>The sugar expansion coefficient target.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.ReferenceTemperature">
            <summary>
            Gets or sets the reference temperature.
            </summary>
            <value>The reference temperature.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.ReferenceDensityCarrierFluid">
            <summary>
            Gets or sets the reference density carrier fluid.
            </summary>
            <value>The reference density carrier fluid.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.ReferenceDensityTargetFluid">
            <summary>
            Gets or sets the reference density target fluid.
            </summary>
            <value>The reference density target fluid.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.IReferenceValues.DensityUnit">
            <summary>
            Gets or sets the density unit.
            </summary>
            <value>The density unit.</value>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ISetTableValues">
            <summary>
            The SetTableValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ISetTableValues.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages">
            <summary>
            The CheckAvailabilityOfTabPages interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsBaseSettingsTabPageAvailable">
            <summary>
            Determines whether base settings tab page is available.
            </summary>
            <returns><c>true</c> if base settings tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsCoefficientOverviewTabPageAvailable">
            <summary>
            Determines whether coefficient overview tab page is available.
            </summary>
            <returns><c>true</c> if coefficient overview tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsExpertResultsTabPageAvailable">
            <summary>
            Determines whether expert results tab page is available.
            </summary>
            <returns><c>true</c> if expert results tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsLiquidPropertiesTabPageAvailable">
            <summary>
            Determines whether liquid properties tab page is available.
            </summary>
            <returns><c>true</c> if liquid properties tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsReferenceValuesTabPageAvailable">
            <summary>
            Determines whether [is reference values tab page available].
            </summary>
            <returns><c>true</c> if [is reference values tab page available]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckThatAllFieldsInBaseSettingsAreGrayed">
            <summary>
            Interface ICheckThatAllFieldsInBaseSettingsAreGrayed
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.ICheckThatAllFieldsInBaseSettingsAreGrayed.Run">
            <summary>
            Checks whether all elements in the tab 'Base settings' ( combo boxes, edit fields etc...) except 'Calculation base' are grayed and inactive. 
            This is the case then selecting 'Fine tuning' as 'Calculation base'.
            </summary>
            <returns><c>true</c> if all elements are grayed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenExport">
            <summary>
                Description of IOpenExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenExport.ViaIcon">
            <summary>
                Start export via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenHelp">
            <summary>
                Description of IOpenHelp.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenHelp.ViaIcon">
            <summary>
                Start help via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenImport">
            <summary>
                Description of IOpenImport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenImport.ViaIcon">
            <summary>
                Start import via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenLoad">
            <summary>
                Description of IOpenLoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenLoad.ViaIcon">
            <summary>
                Start load via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenNew">
            <summary>
                Description of IOpenNew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenNew.ViaIcon">
            <summary>
                Start new via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenSave">
            <summary>
                Description of IOpenSave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenSave.ViaIcon">
            <summary>
                Start save via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs">
            <summary>
                Description of IOpenSaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs.ViaIcon">
            <summary>
                Start save as via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunCalculate">
            <summary>
                Description of IRunCalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunCalculate.ViaIcon">
            <summary>
                Start calculate via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunRead">
            <summary>
                Description of IRunRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunRead.ViaIcon">
            <summary>
                Start read via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunWrite">
            <summary>
                Description of IRunWrite.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Execution.IRunWrite.ViaIcon">
            <summary>
                Start write via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsCalculationButtonEnabled">
            <summary>
            The IsCalculationButtonEnabled interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsCalculationButtonEnabled.Run">
            <summary>
            Returns whether the calculate button is enabled
            </summary>
            <returns><c>true</c> if enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished">
            <summary>
                Description of IsCalculationFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished.Run">
            <summary>
                Checks if writing coefficients to the device is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsNewButtonEnabled">
            <summary>
            The IsNewButtonEnabled interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsNewButtonEnabled.Run">
            <summary>
            Returns whether the new button is enabled
            </summary>
            <returns><c>true</c> if enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsReadFinished">
            <summary>
                Description of IsReadFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsReadFinished.Run">
            <summary>
                Checks if reading coefficients from the device is finished
            </summary>
            <returns>
                true: if read button is enabled and user notification message is shown
                false: if either read button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished">
            <summary>
                Description of IsWriteFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished.Run">
            <summary>
                Checks if writing coefficients to the device is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages">
            <summary>
                Description of CheckUserNotificationMessages.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages.Run">
            <summary>
                Analysis the user notification messages in the status area
            </summary>
            <returns>
                true: 	if everything is fine
                false:  if an error, failure or warning is detected
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages.Run(System.String)">
            <summary>
                Analysis the user notification messages in the status area
            </summary>
            <param name="message">Message to check</param>
            <returns>
                true: 	if everything is fine
                false:  if an error, failure or warning is detected
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Description of IsDTMConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Description of IsDTMDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected">
            <summary>
                Description of IWaitUntilDtmIsConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
            Interface IWaitUntilDtmIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.ConcentrationV2.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICalculate">
            <summary>
                Description of ICalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICalculate.Run">
            <summary>
            Starts calculation via icon, waits until calculation is finished
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICheckExpertResults">
            <summary>
            The CheckExpertResults interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICheckExpertResults.SelectEachResultAndTakeScreenshot">
            <summary>
            Selects each result from the combo box and takes a screenshot of the diagram
            </summary>
            <returns><c>true</c> if execution was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICloseModule">
            <summary>
                Interface of CloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IConfigureBaseSettings">
            <summary>
                Description of IConfigureBaseSettings.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IConfigureBaseSettings.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            THIS METHOD IS OBSOLETE AND WORKS ONLY WITH OLDER TESTPACKAGES. Configures tab base settings. To ignore a value, it must be an empty string like this -&gt; "".
            </summary>
            <param name="calculationBase">
            Calculation base
            </param>
            <param name="liquidType">
            Liquid type
            </param>
            <param name="densityCalibration">
            Density Calibration
            </param>
            <param name="fieldDensityAdjustment">
            Field Density Adjustment
            </param>
            <param name="sensor">
            Sensor parameter
            </param>
            <param name="temperaturUnit">
            Temperature Unit
            </param>
            <param name="temperaturMin">
            Temperature Min.
            </param>
            <param name="temperaturMax">
            Temperature Max.
            </param>
            <param name="concentrationUnit">
            Concentration Unit
            </param>
            <param name="concentrationMin">
            Concentration Min.
            </param>
            <param name="concentrationMax">
            Concentration Max.
            </param>
            <returns>
            <br>true: if all worked fine</br>
                <br>false: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IConfigureLiquidProperties">
            <summary>
                Description of IConfigureLiquidProperties.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IConfigureLiquidProperties.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Runs the specified calculation base.
            </summary>
            <param name="calculationBase">The calculation base.</param>
            <param name="sensor">The sensor.</param>
            <param name="densityCalibration">The density calibration.</param>
            <param name="temperaturMin">The temperature minimum.</param>
            <param name="temperaturMax">The temperature maximum.</param>
            <param name="temperaturUnit">The temperature unit.</param>
            <param name="densityMin">The density minimum.</param>
            <param name="densityMax">The density maximum.</param>
            <param name="densityUnit">The density unit.</param>
            <param name="concentrationMin">The concentration minimum.</param>
            <param name="concentrationMax">The concentration maximum.</param>
            <param name="concentrationUnit">The concentration unit.</param>
            <returns><c>true</c> if configured, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IExport">
            <summary>
                Description of IExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IExport.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IExport.Run(System.String)">
            <summary>
            Exports Viscosity data with user given filename
            </summary>
            <param name="filename">
            Filename for Visosity Data
            </param>
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IHelp">
            <summary>
                Description of IHelp.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IImport">
            <summary>
                Description of IImport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IImport.Run">
            <summary>
            Imports Concentration data with default name from report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IImport.Run(System.String)">
            <summary>
            Imports Concentration data
            </summary>
            <param name="filename">
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ILoad">
            <summary>
                Description of ILoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ILoad.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ILoad.Run(System.String)">
            <summary>
            load a file with specified file name, check whether user notification message in status bar contains "Data loaded successfully"
            </summary>
            <param name="fileName">
            User specified filename
            </param>
            <returns>
            true: if loading was successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.INew">
            <summary>
                Description of INew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.INew.Run">
            <summary>
            Clears Concentration data via New button, checks whether coefficients in coefficients overview are empty
            </summary>
            <returns>true: if Concentration data is cleared; false: if an error occurred</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOffline">
            <summary>
                Interface of OpenModuleOffline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOffline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOnline">
            <summary>
                Interface of OpenModuleOnline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IRead">
            <summary>
                Description of IRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IRead.Run">
            <summary>
                Reads coefficients from device, waits until "read finished" user notification message is displayed and read icon is enabled again
            </summary>
            <returns>
                true: if coefficients were read
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISave">
            <summary>
                Description of ISave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISave.Run">
            <summary>
                Saves current Viscosity data via Save button
            </summary>
            <returns>
                true: if call worked fine
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISaveAs">
            <summary>
                Description of ISaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISaveAs.Run(System.String)">
            <summary>
            Saves file under given filename, replaces already existing files with same filename
                FILE WATCHER will check if file has been created or modified
                Default on drive C:
            </summary>
            <param name="fileName">
            Filename under which file is saved
            </param>
            <returns>
            true: if file was saved successful
                false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISaveAs.Run">
            <summary>
            Exports Concentration data with default name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISetCoefficientsFromDevice">
            <summary>
            Interface ISetCoefficientsFromDevice
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.ISetCoefficientsFromDevice.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Sets coefficients from device
            </summary>
            <param name="a0">
            The a0 coefficient.
            </param>
            <param name="a1">
            The a1 coefficient.
            </param>
            <param name="a2">
            The a2 coefficient.
            </param>
            <param name="a3">
            The a3 coefficient.
            </param>
            <param name="a4">
            The a4 coefficient.
            </param>
            <param name="b1">
            The b1 coefficient.
            </param>
            <param name="b2">
            The b2 coefficient.
            </param>
            <param name="b3">
            The b3 coefficient.
            </param>
            <returns>
            <c>true</c> if coefficients have been set correctly, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IWrite">
            <summary>
                Description of IWrite.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Flows.IWrite.Run">
            <summary>
                writes coefficients to device, waits until "write finished" user notification message is displayed and write button is enabled again
            </summary>
            <returns>
                true: if coefficients were written
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings">
            <summary>
                Provides interfaces tab base settings within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.CalculationBase">
            <summary>
            Gets or sets the calculation base.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationMax">
            <summary>
            Gets or sets the concentration max.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationMin">
            <summary>
            Gets or sets the concentration min.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ConcentrationUnit">
            <summary>
            Gets or sets the concentration unit.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.DensityCalibration">
            <summary>
            Gets or sets the density calibration.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.FieldDensityAdjustment">
            <summary>
            Gets or sets the field density adjustment.
            </summary>
            <value>
            The field density adjustment.
            </value>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.LiquidType">
            <summary>
            Gets or sets the liquid type.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.ReferenceTemperature">
            <summary>
            Gets or sets the reference temperature.
            </summary>
            <value>The reference temperature.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.Sensor">
            <summary>
            Gets or sets the sensor.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureMax">
            <summary>
            Gets or sets the temperature max.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureMin">
            <summary>
            Gets or sets the temperature min.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IBaseSettings.TemperatureUnit">
            <summary>
            Gets or sets the temperature unit.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Description of ICloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Close module via tab at related tab control
            </summary>
            <param name="moduleToClose">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview">
            <summary>
                Provides methods for tab coefficients overview within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA0">
            <summary>
            Gets or sets the calculated a 0.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA1">
            <summary>
            Gets or sets the calculated a 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA2">
            <summary>
            Gets or sets the calculated a 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA3">
            <summary>
            Gets or sets the calculated a 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedA4">
            <summary>
            Gets or sets the calculated a 4.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB1">
            <summary>
            Gets or sets the calculated b 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB2">
            <summary>
            Gets or sets the calculated b 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CalculatedB3">
            <summary>
            Gets or sets the calculated b 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA0">
            <summary>
            Gets or sets the from device a 0.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA1">
            <summary>
            Gets or sets the from device a 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA2">
            <summary>
            Gets or sets the from device a 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA3">
            <summary>
            Gets or sets the from device a 3.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceA4">
            <summary>
            Gets or sets the from device a 4.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB1">
            <summary>
            Gets or sets the from device b 1.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB2">
            <summary>
            Gets or sets the from device b 2.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.FromDeviceB3">
            <summary>
            Gets or sets the from device b 3.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreCalculatedCoefficientsAvailable">
            <summary>
                Checks whether calculated Coefficients are available or not
            </summary>
            <returns>
                true: if at least one value is not empty
                false: if all values are empty
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreCoefficientsAvailable">
            <summary>
                Checks whether Coefficients are available or not
            </summary>
            <returns>
                true: if at least one coefficient is not "0"
                false: if all values are "0"
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.AreReadCoefficientsAvailable">
            <summary>
                Checks whether Coefficients read from device are available or not
            </summary>
            <returns>
                true: if at least one value is not empty
                false: if all values are empty
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.String)">
            <summary>
            Compares all calculated coefficients against the coefficients read from device
            </summary>
            <param name="accuracy">
            maximum difference between two coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.Double)">
            <summary>
            Compares all calculated coefficients against the coefficients read from device
            </summary>
            <param name="accuracy">
            maximum difference between two coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.String,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficients(System.Double,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficientsFromDevice(System.String,System.String[])">
            <summary>
            Compares all coefficients from device against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICoefficientsOverview.CompareCoefficientsFromDevice(System.Double,System.String[])">
            <summary>
            Compares all coefficients from device against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICommonMethods">
            <summary>
                Provides methods for tab liquid properties within module concentration
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetParameterValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a specific control to a specific value
            </summary>
            <param name="element">control to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICommonMethods.GetParameterValue(Ranorex.Core.Element)">
            <summary>
                Get value of a specific control
            </summary>
            <param name="element">control to get the value from</param>
            <returns>
                <br>String: if everything worked fine</br>
                <br>Emptry String: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetTextValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a text control to a specified value
            </summary>
            <param name="element">parameter to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ICommonMethods.SetComboBoxValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a comboBox control to a specified value
            </summary>
            <param name="element">parameter to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer">
            <summary>
                Provides methods to select different tabs within module concentration
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabBaseSettings">
            <summary>
                Select tab base settings
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabCoefficientsOverview">
            <summary>
                Select tab coefficients overview
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabExpertResults">
            <summary>
                Select tab expert results
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabLiquidProperties">
            <summary>
                Select tab liquid properties
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IContainer.SelectTabReferenceValues">
            <summary>
            Selects the tab reference values.
            </summary>
            <returns><c>true</c> if tab selected, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IExpertResults">
            <summary>
                Provides methods for tab expert results within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IExpertResults.Diagram">
            <summary>
            Gets or sets the diagram.
            </summary>
            <value>The diagram.</value>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IExpertResults.GetDiagramImage">
            <summary>
                Get diagram image
            </summary>
            <returns>
                <br>True: if screenshot could be made</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable">
            <summary>
            The GetValuesFromTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.AllValues">
            <summary>
            Gets all values from Concentration table within Liquid properties and stores them in a list. This will only work if you selected List as input form.
            </summary>
            <returns>List with all table values.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.PrintAllValuesInReport">
            <summary>
            Prints table values in report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.SingleValue(System.Int32,System.Int32)">
            <summary>
            Returns the value for a specified row and column
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <returns>
            The value for the row and column.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties">
            <summary>
                Provides methods for tab liquid properties within module concentration
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.InputFormat">
            <summary>
            Gets or sets the input format.
            </summary>
            <value>The input format.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Spreadsheet">
            <summary>
            Gets or sets the spreadsheet.
            </summary>
            <value>The spreadsheet.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1">
            <summary>
            Gets or sets the value1.
            </summary>
            <value>The value1.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Max">
            <summary>
            Gets or sets the value1 maximum.
            </summary>
            <value>The value1 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Min">
            <summary>
            Gets or sets the value1 minimum.
            </summary>
            <value>The value1 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value1Unit">
            <summary>
            Gets or sets the value1 unit.
            </summary>
            <value>The value1 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2">
            <summary>
            Gets or sets the value2.
            </summary>
            <value>The value2.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Max">
            <summary>
            Gets or sets the value2 maximum.
            </summary>
            <value>The value2 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Min">
            <summary>
            Gets or sets the value2 minimum.
            </summary>
            <value>The value2 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value2Unit">
            <summary>
            Gets or sets the value2 unit.
            </summary>
            <value>The value2 unit.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3">
            <summary>
            Gets or sets the value3.
            </summary>
            <value>The value3.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Max">
            <summary>
            Gets or sets the value3 maximum.
            </summary>
            <value>The value3 maximum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Min">
            <summary>
            Gets or sets the value3 minimum.
            </summary>
            <value>The value3 minimum.</value>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.Value3Unit">
            <summary>
            Gets or sets the value3 unit.
            </summary>
            <value>The value3 unit.</value>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ILiquidProperties.FillList">
            <summary>
                Fills list with random numbers between 0-100
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Description of IOpenModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Open module via frame menu within a specific time
            </summary>
            <param name="moduleToOpen">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ISetTableValues">
            <summary>
            The SetTableValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ISetTableValues.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages">
            <summary>
            The CheckAvailabilityOfTabPages interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsBaseSettingsTabPageAvailable">
            <summary>
            Determines whether base settings tab page is available.
            </summary>
            <returns><c>true</c> if base settings tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsCoefficientOverviewTabPageAvailable">
            <summary>
            Determines whether coefficient overview tab page is available.
            </summary>
            <returns><c>true</c> if coefficient overview tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsExpertResultsTabPageAvailable">
            <summary>
            Determines whether expert results tab page is available.
            </summary>
            <returns><c>true</c> if expert results tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckAvailabilityOfTabPages.IsLiquidPropertiesTabPageAvailable">
            <summary>
            Determines whether liquid properties tab page is available.
            </summary>
            <returns><c>true</c> if liquid properties tab page is available; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckThatAllFieldsInBaseSettingsAreGrayed">
            <summary>
            Interface ICheckThatAllFieldsInBaseSettingsAreGrayed
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.ICheckThatAllFieldsInBaseSettingsAreGrayed.Run">
            <summary>
            Checks whether all elements in the tab 'Base settings' ( combo boxes, edit fields etc...) except 'Calculation base' are grayed and inactive. 
            This is the case then selecting 'Fine tuning' as 'Calculation base'.
            </summary>
            <returns><c>true</c> if all elements are grayed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenExport">
            <summary>
                Description of IOpenExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenExport.ViaIcon">
            <summary>
                Start export via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenHelp">
            <summary>
                Description of IOpenHelp.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenHelp.ViaIcon">
            <summary>
                Start help via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenImport">
            <summary>
                Description of IOpenImport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenImport.ViaIcon">
            <summary>
                Start import via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenLoad">
            <summary>
                Description of IOpenLoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenLoad.ViaIcon">
            <summary>
                Start load via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenNew">
            <summary>
                Description of IOpenNew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenNew.ViaIcon">
            <summary>
                Start new via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenSave">
            <summary>
                Description of IOpenSave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenSave.ViaIcon">
            <summary>
                Start save via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs">
            <summary>
                Description of IOpenSaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs.ViaIcon">
            <summary>
                Start save as via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunCalculate">
            <summary>
                Description of IRunCalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunCalculate.ViaIcon">
            <summary>
                Start calculate via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunRead">
            <summary>
                Description of IRunRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunRead.ViaIcon">
            <summary>
                Start read via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunWrite">
            <summary>
                Description of IRunWrite.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Execution.IRunWrite.ViaIcon">
            <summary>
                Start write via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished">
            <summary>
                Description of IsCalculationFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished.Run">
            <summary>
                Checks if writing coefficients to the device is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsReadFinished">
            <summary>
                Description of IsReadFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsReadFinished.Run">
            <summary>
                Checks if reading coefficients from the device is finished
            </summary>
            <returns>
                true: if read button is enabled and user notification message is shown
                false: if either read button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished">
            <summary>
                Description of IsWriteFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished.Run">
            <summary>
                Checks if writing coefficients to the device is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages">
            <summary>
                Description of CheckUserNotificationMessages.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages.Run">
            <summary>
                Analysis the user notification messages in the status area
            </summary>
            <returns>
                true: 	if everything is fine
                false:  if an error, failure or warning is detected
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.ICheckUserNotificationMessages.Run(System.String)">
            <summary>
                Analysis the user notification messages in the status area
            </summary>
            <param name="message">Message to check</param>
            <returns>
                true: 	if everything is fine
                false:  if an error, failure or warning is detected
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Description of IsDTMConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Description of IsDTMDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected">
            <summary>
                Description of IWaitUntilDtmIsConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
            Interface IWaitUntilDtmIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Concentration.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.ICloseModule">
            <summary>
            The CloseModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IExport">
            <summary>
            The Export interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IExport.Run">
            <summary>
            Export Linearization data with default file name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IExport.Run(System.String)">
            <summary>
            Exports the a Linearization file.
            </summary>
            <param name="fileName">
            Name and path of the file. E.g. C:\Test\testData 
            </param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IImport">
            <summary>
            The Import interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IImport.Run">
            <summary>
            Export Linearization data with default file name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IImport.Run(System.String)">
            <summary>
            Imports Linearization data via toolbar icon
            </summary>
            <param name="filename">
            filename (and path)of dataset which should be imported
            </param>
            <returns>
            true, if file was imported successfully; false, if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOffline">
            <summary>
            The OpenModuleOffline interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOffline.Run">
            <summary>
             Open module via frame menu within a default time
            </summary>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOnline">
            <summary>
            The OpenModuleOnline interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IRead">
            <summary>
            The Read interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IRead.Run(System.Int32)">
            <summary>
            Writes to device
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            true: if reading finished successfully; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IWrite">
            <summary>
            The Write interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Flows.IWrite.Run(System.Int32)">
            <summary>
            Writes to device
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            true: if writing finished successfully; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IClickOnRead">
            <summary>
            The ClickOnRead interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IClickOnRead.Run">
            <summary>
            Mouse click on the button Read
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IClickOnWrite">
            <summary>
            The ClickOnWrite interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IClickOnWrite.Run">
            <summary>
            Mouse click on the button Write
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab">
            <summary>
            The ConfigureSettingsTab interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetFirmwareVersion">
            <summary>
            Gets firmware version
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetDeviceName">
            <summary>
            Gets device name
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetOrderCode">
            <summary>
            Gets order code
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetSerialNumber">
            <summary>
            Gets serial number
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetOperatingTime">
            <summary>
            Get operating time
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetDateTime">
            <summary>
            Get date time
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable">
            <summary>
            The GetValuesFromTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.AllValues">
            <summary>
            Gets all values from table and stores them in a list.
            </summary>
            <returns>List with all table values.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.PrintAllValuesInReport">
            <summary>
            Prints all linearization table values in report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.SingleValue(System.Int32,System.Int32)">
            <summary>
            Returns the value for a specified row and column
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <returns>
            The value for the row and column.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ISelectTab">
            <summary>
            The SelectTab interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ISelectTab.Run(System.Int32)">
            <summary>
            Select a tab with specified tabindex
            </summary>
            <param name="index">
            Tabindex to select
            </param>
            <returns>
            <br>True: if selection worked </br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ISetTableValues">
            <summary>
            The SetTableValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ISetTableValues.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.ICompareValues">
            <summary>
            The CompareValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.ICompareValues.AreValuesEqual(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double)">
            <summary>
            Determines whether values of two lists representing the Linearization table are equal
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="referenceValues">
            The reference values.
            </param>
            <param name="accuracy">
            The accuracy for the comparison of two double values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="button">
            Button to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
            Checks if module (offline) is ready
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="adapter">
            The adapter.
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="button">
            The button.
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
            Checks if module (offline) is ready
            </summary>
            <param name="element">
            Element to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
            Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be ready
            </param>
            <returns>
            <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
            Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be ready
            </param>
            <returns>
            <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnExport">
            <summary>
            The ClickOnExport interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnExport.Run">
            <summary>
            Mouse click on the button Export
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnImport">
            <summary>
            The ClickOnImport interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnImport.Run">
            <summary>
            Mouse click on the button import
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnResetZoomArea">
            <summary>
            The ClickOnResetZoomArea interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnResetZoomArea.Run">
            <summary>
            Mouse click on the button reset zoom area
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnShowTable">
            <summary>
            The IClickOnShowTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnShowTable.Run">
            <summary>
            Mouse click on the button show table
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartCa">
            <summary>
            The ClickOnStartCa interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartCa.Run">
            <summary>
            Mouse click on the button Start CA
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartDt">
            <summary>
            The ClickOnStartDT interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartDt.Run">
            <summary>
            Mouse click on the button StartDT.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartQh">
            <summary>
            The ClickOnStartQH interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnStartQh.Run">
            <summary>
            Mouse click on the button StartQH.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnUndoZoom">
            <summary>
            The ClickOnUndoZoom interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.MenuArea.Toolbar.Execution.IClickOnUndoZoom.Run">
            <summary>
            Mouse click on the button undo zoom
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Description of IsDtmConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Description of IsDTMDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting">
            <summary>
            The ReadingAndWriting interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.HasReadingStarted(System.Int32)">
            <summary>
            Validates whether reading from device started
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if progress bar(buttonOperationInProgress) is != null
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.HasWritingStarted(System.Int32)">
            <summary>
            Validates whether writing from device started
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if progress bar(buttonOperationInProgress) is != null
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsReadButtonActive">
            <summary>
            Determines whether [read button is active].
            </summary>
            <returns><c>true</c> if [read button is active]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsReading">
            <summary>
            Determines whether reading is active
            </summary>
            <returns>
            True: if reading is active. False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsWriteButtonActive">
            <summary>
            Determines whether [write button is active].
            </summary>
            <returns><c>true</c> if [write button is active]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsWriting">
            <summary>
            Determines whether reading or writing is active
            </summary>
            <returns>
            True: if reading is active. False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilReadButtonAndWriteButtonAreActive(System.Int32)">
            <summary>
            Waits the until read button and write button are active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if read button and write button are active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilReadingIsFinished(System.Int32)">
            <summary>
            Waits until reading finished
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if reading is finished; False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilWritingIsFinished(System.Int32)">
            <summary>
            Waits until writing is finished
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if reading or writing is finished; False: otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected">
            <summary>
                Description of IWaitUntilDtmIsConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
            Interface for WaitUntilDtmIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages">
            <summary>
            The CheckUserNotificationMessages interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsError">
            <summary>
            Scans the user notification messages in the status area for error messages
            </summary>
            <returns>
            true:  if the text contains any of the keywords
            false:  if the text does not contain any of the keywords
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsString(System.String)">
            <summary>
            Checks whether the user message contains a particular string
            </summary>
            <param name="value">
            String to look for
            </param>
            <returns>
            true: if the user message contains the string
            false: if string is not found
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.DipTable.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.UserMessage">
            <summary>
            The user message.
            </summary>
            <returns>
            The actual user message
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ICloseModule">
            <summary>
                Provides methods for flow ICloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ICloseModule.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ISaveAsPdf">
            <summary>
            Interface ISaveAsPdf
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ISaveAsPdf.Run">
            <summary>
            Flow: Save file as PDF via file browser with default timeout
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ISaveAsPdf.Run(System.String)">
            <summary>
            Flow: Save file as PDF via file browser with default timeout
            </summary>
            <param name="fileName">
            Filename to save printout as
            </param>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Flows.ISaveAsPdf.Run(System.String,System.Boolean,System.Int32)">
            <summary>
            Flow: Save file as PDF via file browser with specialized timeout
            </summary>
            <param name="fileName">
            Filename to save printout as
            </param>
            <param name="waitUntilFinished">
            Control if should be waited until module is opened or not
            </param>
            <param name="timeOutInMilliseconds">
            Time until printout has to be generated at last
            </param>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for function ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for function IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IOpenSaveAs">
            <summary>
                Interface for function Open Save As
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IOpenSaveAs.ViaButton">
            <summary>
                Run via Button
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IPrinterAndProgress">
            <summary>
                Interface for area Printer And Progress
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IPrinterAndProgress.GetMainProgressBarState">
            <summary>
                Get main progress state
            </summary>
            <returns>
                <br>String: if call worked fine</br>
                <br>Empty string: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.IPrinterAndProgress.GetSubProgressBarState">
            <summary>
                Get sub progress state
            </summary>
            <returns>
                <br>String: if call worked fine</br>
                <br>Empty string: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="adapter">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Interface WaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilPrintingIsFinished">
            <summary>
                Description of IWaitUntilPrintingIsFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilPrintingIsFinished.IsPrintingFinished">
            <summary>
                Provides validation function for module Create Documentation
            </summary>
            <returns>
                <br>True: if prinint finished</br>
                <br>False: if printing is not finished</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.ApplicationArea.MainView.Validation.IWaitUntilPrintingIsFinished.Run(System.Int32)">
            <summary>
                Waits until printing is finished
            </summary>
            <param name="timeOutInMilliseconds">time within action must be finished</param>
            <returns>
                <br>True: if printing is finished in time</br>
                <br>False: if printing is not finished in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                Description of IIsDtmDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.CreateDocumentation.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICloseModule">
            <summary>
                Provides interfaces for CloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICloseModule.Run">
            <summary>
                Interface for function ViaWindow
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingCyclic">
            <summary>
                Provides methods for flow ICurveReadingCyclic
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingCyclic.RunViaMenu(System.Int32,System.Boolean)">
            <summary>
                Method to start cyclic reading via menu
            </summary>
            <param name="numberOfCurves">Number of curves to read</param>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingReference">
            <summary>
                Description of ICurveReadingReference.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingReference.RunViaMenu(System.Boolean)">
            <summary>
            
            </summary>
            <param name="waitUntilFinished"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingSingle">
            <summary>
                Provides methods for flow ICurveReadingSingle
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingSingle.RunViaMenu(System.Boolean)">
            <summary>
                Method to start curve reading via menu
            </summary>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingSingle.RunViaIcon(System.Boolean)">
            <summary>
                Method to start curve reading via icon
            </summary>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingStop">
            <summary>
                Provides methods for flow ICurveReadingStop
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingStop.RunViaMenu">
            <summary>
                Method to stop curve reading via menu
            </summary>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ICurveReadingStop.RunViaIcon">
            <summary>
                Method to stop curve reading via icon
            </summary>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ILoadCurveFile">
            <summary>
                Interface for flow Load Curve File
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ILoadCurveFile.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ILoadCurveFile.RunViaMenu(System.String)">
            <summary>
            Start flow with default behavior
            </summary>
            <param name="filename">
            File to load
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ILoadCurveFile.RunViaMenu(System.String,System.Boolean)">
            <summary>
            Start flow with specific behavior
            </summary>
            <param name="filename">
            File to load
            </param>
            <param name="discardUnsaved">
            Behavior if unsaved curves are available
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.INewCurve">
            <summary>
                Interface for flow New Curve.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.INewCurve.RunViaMenu">
            <summary>
                Start flow with default behaviour
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.INewCurve.RunViaMenu(System.Boolean)">
            <summary>
                Start flow with specified behaviour
            </summary>
            <param name="discardUnsaved">Behaviour if unsafed curves are available</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurve">
            <summary>
                Description of ISaveCurve.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurve.RunViaMenu">
            <summary>
                Methods to save curves
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurve.RunViaMenu(System.String)">
            <summary>
                Methods to save curves
            </summary>
            <param name="filename">File to save as named</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurve.RunViaMenu(System.String,System.Boolean,System.Boolean)">
            <summary>
                Methods to save curves
            </summary>
            <param name="filename">File to save as named</param>
            <param name="overwriteData">Enable / disable overwriting data mode</param>
            <param name="appendData">Enable / disable appending data mode</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurveAs">
            <summary>
                Description of ISaveCurveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurveAs.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurveAs.RunViaMenu">
            <summary>
                Methods to save curves
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurveAs.RunViaMenu(System.String)">
            <summary>
            Methods to save curves
            </summary>
            <param name="filename">
            File to save as named
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Flows.ISaveCurveAs.RunViaMenu(System.String,System.Boolean,System.Boolean)">
            <summary>
            Methods to save curves
            </summary>
            <param name="filename">
            File to save as named
            </param>
            <param name="overwriteData">
            Enable / disable overwriting data mode
            </param>
            <param name="appendData">
            Enable / disable appending data mode
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for function ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
            Methods to Open module
            </summary>
            <param name="moduleToOpen">
            Module name
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for function IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
            Methods to Open module
            </summary>
            <param name="moduleToOpen">
            Module name
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.IOpenRemarks">
            <summary>
                Interface for function Open Remarks
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.IOpenRemarks.ViaButton">
            <summary>
                Run via button
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
            Checks if module (offline) is ready
            </summary>
            <param name="button">
            Button to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
            Checks if module (offline) is ready
            </summary>
            <param name="element">
            Element to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="button">
            Button to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="element">
            Element to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
            Checks if module (online) is ready
            </summary>
            <param name="adapter">
            Element to check
            </param>
            <returns>
            <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite">
            <summary>
                Validation methods for all read and write related actions
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsProgressbarVisible">
            <summary>
                Based on visual detection this function searches for the blue gradient color of the progressbar in the lower statusbar
            </summary>
            <returns>
                <br>True: if progress bar is visible</br>
                <br>False: if progress bar is not visible</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsReading">
            <summary>
                Checks if envelope curve is in reading mode
            </summary>
            <returns>
                <br>True: if module is reading curves</br>
                <br>False: if module is not reading curves</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsReadyToStopReading">
            <summary>
                Checks if stop reading button is enabled and accessible
            </summary>
            <returns>
                <br>True: if module is ready to stop reading</br>
                <br>False: if module is not ready to stop reading</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsWritingMAP">
            <summary>
                Checks if envelope curve is in MAP writing mode
            </summary>
            <returns>
                <br>True: if module is writing MAP</br>
                <br>False: if module is not writing MAP</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.WaitUntilReadFinished(System.Int32)">
            <summary>
            Waits until Read-Curve is finished
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be ready
            </param>
            <returns>
            <br>True: if reading is finished in time</br>
                <br>False: if reading is not finished in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of WaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of WaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
            Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be ready
            </param>
            <returns>
            <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings">
            <summary>
                Description of ReadSettings.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.BeginRangeUnit">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EditBeginRange">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EditEndRage">
            <summary>
                Can access the End of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EndRangeUnit">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Resolution">
            <summary>
                Change resolution
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Cancel">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.CheckAllCurves">
            <summary>
                Check curves which should be read
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Close">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Confirm">
            <summary>
                Confirm settings. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.ReadNow">
            <summary>
                Confirm settings and start to read immediately. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ReadSettings.Execution.IReadSettings.UncheckAllCurves">
            <summary>
                Check curves which should not be read
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings">
            <summary>
                Description of ReadSettings.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMax">
            <summary>
                Can access the xMax of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMaxUnit">
            <summary>
                Can access the xMax Unit of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMin">
            <summary>
                Can access the xMin of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMinUnit">
            <summary>
                Can access the xMin Unit of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Cancel">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Close">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Confirm">
            <summary>
                Confirm settings. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenAbout">
            <summary>
                Interface for function Open About
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenAbout.ViaMenu">
            <summary>
                Open about box of module Envelope Curve
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenContents">
            <summary>
                Interface for function Open Contents
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenContents.ViaMenu">
            <summary>
                Open via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenCyclicReadSettings">
            <summary>
                Interface for function Open Cyclic Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenCyclicReadSettings.ViaMenu">
            <summary>
                Open via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenExportToFile">
            <summary>
                Interface for function Open Export To File
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenExportToFile.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenExtract">
            <summary>
                Interface for function Open Extract
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenExtract.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenLoadCurve">
            <summary>
                Interface for function Open Load Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenLoadCurve.ViaMenu">
            <summary>
                Via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenReadSettings">
            <summary>
                Interface for function Open Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenReadSettings.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenRemarks">
            <summary>
                Interface for function Open Remarks
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenRemarks.ViaMenu">
            <summary>
                Run via button
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenSaveCurveAs">
            <summary>
                Interface for function Open Save Curve As
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenSaveCurveAs.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenSelectedCurves">
            <summary>
                Interface for function Open Selected Curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenSelectedCurves.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenZoomAndGridSettings">
            <summary>
                Interface for function Open Zoom And Grid Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IOpenZoomAndGridSettings.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunClearPlotDisplay">
            <summary>
                Interface for function Run Clear Plot Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunClearPlotDisplay.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunCyclicRead">
            <summary>
                Interface for function Run Cyclic Read
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunCyclicRead.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDiagram">
            <summary>
                Interface for function Run Diagram
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDiagram.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDiagramInfo">
            <summary>
                Interface for function Run Diagram Info
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDiagramInfo.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDisplay">
            <summary>
                Interface for function Run Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunDisplay.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEndReadWrite">
            <summary>
                Interface to start Envelope Curve functionality stop curve reading
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEndReadWrite.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope1">
            <summary>
                Interface to use Envelope Curve -> Set Cursor -> Cursor 1 -> Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope1.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope1.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope2">
            <summary>
                Interface to use Envelope Curve -> Set Cursor -> Cursor 2 -> Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope2.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelope2.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelopeCurve">
            <summary>
                Start menu Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunEnvelopeCurve.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFastForward">
            <summary>
                Interface to start Envelope Curve functionality fast forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFastForward.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFastReverse">
            <summary>
                Interface to start Envelope Curve functionality fast reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFastReverse.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFirstCurve">
            <summary>
                Interface to start Envelope Curve functionality show first curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunFirstCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunForward">
            <summary>
                Interface to start Envelope Curve functionality forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunForward.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunHelp">
            <summary>
                Interface to open Envelope Curve menu help
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunHelp.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:Ranorex.Core.Element"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunLastCurve">
            <summary>
                Interface to start Envelope Curve functionality show last curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunLastCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunLayout">
            <summary>
                Interface to open Envelope Curve submenu layout
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunLayout.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:Ranorex.Core.Element"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunNewCurve">
            <summary>
                Interface to start Envelope Curve functionality new (empty) diagram, parameters and curve data
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunNewCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunNextCurve">
            <summary>
                Interface to start Envelope Curve functionality show next curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunNextCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunOverlappedCurves">
            <summary>
                Interface to start Envelope Curve functionality activate showing overlapped curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunOverlappedCurves.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlayback">
            <summary>
                Interface to start Envelope Curve functionality playback curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlayback.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:Ranorex.Core.Element"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlaybackPause">
            <summary>
                Interface to start Envelope Curve functionality pause playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlaybackPause.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlaybackStop">
            <summary>
                Interface to start Envelope Curve functionality stop playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPlaybackStop.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPreviousCurve">
            <summary>
                Interface to start Envelope Curve functionality show previous curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunPreviousCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunReadCurve">
            <summary>
                Interface to start Envelope Curve functionality read single curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunReadCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunResetReadingRange">
            <summary>
            Interface IRunResetReadingRange
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunResetReadingRange.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunResetZoomArea">
            <summary>
                Interface to start Envelope Curve functionality reset zoom settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunResetZoomArea.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunReverse">
            <summary>
                Interface to start Envelope Curve functionality reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunReverse.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunSaveCurve">
            <summary>
                Interface to start Envelope Curve functionality save curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunSaveCurve.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunUndoZoom">
            <summary>
                Interface to start Envelope Curve functionality undo zoom
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Menubar.Execution.IRunUndoZoom.ViaMenu">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenContents">
            <summary>
                Interface for function Open Contents
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenContents.ViaIcon">
            <summary>
                Open via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenCyclicReadSettings">
            <summary>
                Interface for funtion Open Cyclic Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenCyclicReadSettings.ViaIcon">
            <summary>
                Open via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenLoadCurve">
            <summary>
                Interface for function Open Load Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenLoadCurve.ViaIcon">
            <summary>
                Via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenReadSettings">
            <summary>
                Interface for function Open Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenReadSettings.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenSelectedCurves">
            <summary>
                Interface for function Open Selected Curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IOpenSelectedCurves.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunClearPlotDisplay">
            <summary>
                Interface for function Run Clear Plot Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunClearPlotDisplay.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunCyclicRead">
            <summary>
                Interface for function Run Cyclic Read
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunCyclicRead.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunEndReadWrite">
            <summary>
                Interface to start Envelope Curve functionality stop curve reading
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunEndReadWrite.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFastForward">
            <summary>
                Interface to start Envelope Curve functionality fast forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFastForward.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFastReverse">
            <summary>
                Interface to start Envelope Curve functionality fast reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFastReverse.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFirstCurve">
            <summary>
                Interface to start Envelope Curve functionality show first curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunFirstCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunForward">
            <summary>
                Interface to start Envelope Curve functionality forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunForward.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunLastCurve">
            <summary>
                Interface to start Envelope Curve functionality show last curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunLastCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunNewCurve">
            <summary>
                Interface to start Envelope Curve functionality new (empty) diagram, parameters and curve data
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunNewCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunNextCurve">
            <summary>
                Interface to start Envelope Curve functionality show next curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunNextCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlayback">
            <summary>
                Interface to start Envelope Curve functionality playback curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlayback.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlaybackPause">
            <summary>
                Interface to start Envelope Curve functionality pause playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlaybackPause.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlaybackStop">
            <summary>
                Interface to start Envelope Curve functionality stop playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPlaybackStop.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPreviousCurve">
            <summary>
                Interface to start Envelope Curve functionality show previous curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunPreviousCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadCurve">
            <summary>
                Interface to start Envelope Curve functionality read single curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadDiagnosticCurve">
            <summary>
            Interface IRunReadDiagnosticCurve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadDiagnosticCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadReferenceCurve">
            <summary>
            Interface IRunReadReferenceCurve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReadReferenceCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunResetReadingRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunResetReadingRange.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunResetZoomArea">
            <summary>
                Interface to start Envelope Curve functionality reset zoom settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunResetZoomArea.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReverse">
            <summary>
                Interface to start Envelope Curve functionality reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunReverse.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunSaveCurve">
            <summary>
                Interface to start Envelope Curve functionality save curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunSaveCurve.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunUndoZoom">
            <summary>
                Interface to start Envelope Curve functionality undo zoom
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.MenuArea.Toolbar.Execution.IRunUndoZoom.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
                Interface for validation IsDTMConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                Interface for validation IsDTMDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
                Interface for WaitUntilDTMIsConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
                Interface for validation WaitUntilDTMIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurveShed.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
            Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">
            Time until action must be performed
            </param>
            <returns>
            <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICloseModule">
            <summary>
                Provides interfaces for CloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICloseModule.Run">
            <summary>
                Interface for function ViaWindow
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingCyclic">
            <summary>
                Provides methods for flow ICurveReadingCyclic
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingCyclic.RunViaMenu(System.Int32,System.Boolean)">
            <summary>
                Method to start cyclic reading via menu
            </summary>
            <param name="numberOfCurves">Number of curves to read</param>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingReference">
            <summary>
                Description of ICurveReadingReference.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingReference.RunViaMenu(System.Boolean)">
            <summary>
            
            </summary>
            <param name="waitUntilFinished"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingSingle">
            <summary>
                Provides methods for flow ICurveReadingSingle
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingSingle.RunViaMenu(System.Boolean)">
            <summary>
                Method to start curve reading via menu
            </summary>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingSingle.RunViaIcon(System.Boolean)">
            <summary>
                Method to start curve reading via icon
            </summary>
            <param name="waitUntilFinished">Time until action must be finished</param>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingStop">
            <summary>
                Provides methods for flow ICurveReadingStop
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingStop.RunViaMenu">
            <summary>
                Method to stop curve reading via menu
            </summary>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ICurveReadingStop.RunViaIcon">
            <summary>
                Method to stop curve reading via icon
            </summary>
            <returns>
                <br>True: if curves are read</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ILoadCurveFile">
            <summary>
                Interface for flow Load Curve File
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ILoadCurveFile.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ILoadCurveFile.RunViaMenu(System.String)">
            <summary>
            Start flow with default behavior
            </summary>
            <param name="filename">
            File to load
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ILoadCurveFile.RunViaMenu(System.String,System.Boolean)">
            <summary>
            Start flow with specific behavior
            </summary>
            <param name="filename">
            File to load
            </param>
            <param name="discardUnsaved">
            Behavior if unsaved curves are available
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPDiscardEditing">
            <summary>
                Interface for flow MAP Discard Editing.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPDiscardEditing.Run">
            <summary>
                Start flow
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPReadFromDevice">
            <summary>
                Interface for flow MAP Read From Device.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPReadFromDevice.Run">
            <summary>
                Start flow
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPWriteToDevice">
            <summary>
                Interface for flow MAP Write To Device.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IMAPWriteToDevice.Run">
            <summary>
                Start flow
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.INewCurve">
            <summary>
                Interface for flow New Curve.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.INewCurve.RunViaMenu">
            <summary>
                Start flow with default behaviour
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.INewCurve.RunViaMenu(System.Boolean)">
            <summary>
                Start flow with specified behaviour
            </summary>
            <param name="discardUnsaved">Behaviour if unsafed curves are available</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurve">
            <summary>
                Description of ISaveCurve.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurve.RunViaMenu">
            <summary>
                Methods to save curves
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurve.RunViaMenu(System.String)">
            <summary>
                Methods to save curves
            </summary>
            <param name="filename">File to save as named</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurve.RunViaMenu(System.String,System.Boolean,System.Boolean)">
            <summary>
                Methods to save curves
            </summary>
            <param name="filename">File to save as named</param>
            <param name="overwriteData">Enable / disable overwriting data mode</param>
            <param name="appendData">Enable / disable appending data mode</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurveAs">
            <summary>
                Description of ISaveCurveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurveAs.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurveAs.RunViaMenu">
            <summary>
                Methods to save curves
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurveAs.RunViaMenu(System.String)">
            <summary>
            Methods to save curves
            </summary>
            <param name="filename">
            File to save as named
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Flows.ISaveCurveAs.RunViaMenu(System.String,System.Boolean,System.Boolean)">
            <summary>
            Methods to save curves
            </summary>
            <param name="filename">
            File to save as named
            </param>
            <param name="overwriteData">
            Enable / disable overwriting data mode
            </param>
            <param name="appendData">
            Enable / disable appending data mode
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for function ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for function IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.IOpenRemarks">
            <summary>
                Interface for function Open Remarks
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.IOpenRemarks.ViaButton">
            <summary>
                Run via button
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.ICurves">
            <summary>
                Validation methods for all curve related actions
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.ICurves.IsCurveSelectable(System.Int32,System.String)">
            <summary>
                Checks if specified curve is selectable
            </summary>
            <param name="cursorId">Cursor ID (1 or 2)</param>
            <param name="curveType">Ranorex path to menu entry</param>
            <returns>
                <br>True: if curve is selectable</br>
                <br>False: if curve is not selectable</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.ICurves.IsCurveSelectable(System.Int32,System.String[])">
            <summary>
                Checks if specified curves are selectable
            </summary>
            <param name="cursorId">Cursor ID (1 or 2)</param>
            <param name="curveType">Array of ranorex paths to menu entries</param>
            <returns>
                <br>True: if curve is selectable</br>
                <br>False: if curve is not selectable</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.ICurves.IsCurveSelectable(System.Int32,System.Collections.Generic.List{EH.PCPS.TestAutomation.Common.Enumerations.CurveType})">
            <summary>
                Checks if specified curves are selectable
            </summary>
            <param name="cursorId">Cursor ID (1 or 2)</param>
            <param name="curveType">List with CurveType Enums</param>
            <returns>
                <br>True: if curve is selectable</br>
                <br>False: if curve is not selectable</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IGridColor">
            <summary>
                Validation methods for Grid Colors
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IGridColor.IsGridGreen">
            <summary>
                Visually compared the background color of the curve area, to tell if it is green
            </summary>
            <returns>
                <br>True: if grid is green</br>
                <br>False: if grid is not green</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IGridColor.IsGridYellow">
            <summary>
                Visually compared the background color of the curve area, to tell if it is yellow
            </summary>
            <returns>
                <br>True: if grid is yellow</br>
                <br>False: if grid is not yellow</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="adapter">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite">
            <summary>
                Validation methods for all read and write related actions
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.WaitUntilReadFinished(System.Int32)">
            <summary>
                Waits until Read-Curve is finished
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if reading is finished in time</br>
                <br>False: if reading is not finished in time</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsReading">
            <summary>
                Checks if envelope curve is in reading mode
            </summary>
            <returns>
                <br>True: if module is reading curves</br>
                <br>False: if module is not reading curves</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsWritingMAP">
            <summary>
                Checks if envelope curve is in MAP writing mode
            </summary>
            <returns>
                <br>True: if module is writing MAP</br>
                <br>False: if module is not writing MAP</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsProgressbarVisible">
            <summary>
                Based on visual detection this function searches for the blue gradient color of the progressbar in the lower statusbar
            </summary>
            <returns>
                <br>True: if progressbar is visible</br>
                <br>False: if progressbar is not visible</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IReadAndWrite.IsReadyToStopReading">
            <summary>
                Checks if stop reading button is enabled and accessible
            </summary>
            <returns>
                <br>True: if module is ready to stop reading</br>
                <br>False: if module is not ready to stop reading</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of WaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of WaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings">
            <summary>
                Description of ReadSettings.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Resolution">
            <summary>
                Change resolution
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.BeginRangeUnit">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EndRangeUnit">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EditBeginRange">
            <summary>
                Can access the Begin of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.EditEndRage">
            <summary>
                Can access the End of the Range.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.ReadNow">
            <summary>
                Confirm settings and start to read immediately. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Confirm">
            <summary>
                Confirm settings. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Cancel">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.Close">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.CheckAllCurves">
            <summary>
                Check curves which should be read
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ReadSettings.Execution.IReadSettings.UncheckAllCurves">
            <summary>
                Check curves which should not be read
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings">
            <summary>
                Description of ReadSettings.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMaxUnit">
            <summary>
                Can access the xMax Unit of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMax">
            <summary>
                Can access the xMax of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMinUnit">
            <summary>
                Can access the xMin Unit of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.XMin">
            <summary>
                Can access the xMin of zoom area.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Confirm">
            <summary>
                Confirm settings. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Cancel">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.Dialogs.ZoomAndGridSettings.Execution.IZoomAndGridSettings.Close">
            <summary>
                Cancel settings. Changes are lost. Dialog is closed.
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenAbout">
            <summary>
                Interface for function Open About
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenAbout.ViaMenu">
            <summary>
                Open about box of module Envelope Curve
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenContents">
            <summary>
                Interface for function Open Contents
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenContents.ViaMenu">
            <summary>
                Open via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenCyclicReadSettings">
            <summary>
                Interface for funtion Open Cyclic Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenCyclicReadSettings.ViaMenu">
            <summary>
                Open via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenEditParameterList">
            <summary>
                Interface for function Open Edit Parameter List
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenEditParameterList.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenExportToFile">
            <summary>
                Interface for function Open Export To File
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenExportToFile.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenExtract">
            <summary>
                Interface for function Open Extract
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenExtract.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenLoadCurve">
            <summary>
                Interface for function Open Load Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenLoadCurve.ViaMenu">
            <summary>
                Via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenLoadIdealEchoCurve">
            <summary>
                Interface for function Open Load Ideal Echo Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenLoadIdealEchoCurve.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenReadSettings">
            <summary>
                Interface for function Open Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenReadSettings.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenRemarks">
            <summary>
                Interface for function Open Remarks
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenRemarks.ViaMenu">
            <summary>
                Run via button
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenSaveCurveAs">
            <summary>
                Interface for function Open Save Curve As
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenSaveCurveAs.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenSelectedCurves">
            <summary>
                Interface for function Open Selected Curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenSelectedCurves.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenZoomAndGridSettings">
            <summary>
                Interface for function Open Zoom And Grid Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IOpenZoomAndGridSettings.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive1">
            <summary>
                Interface for function Run Active 1
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive1.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive1.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive2">
            <summary>
                Interface for function Run Active 2
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive2.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunActive2.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunAll">
            <summary>
                Interface for function Run All
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunAll.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunAll.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunClearPlotDisplay">
            <summary>
                Interface for function Run Clear Plot Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunClearPlotDisplay.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor1">
            <summary>
                Interface for function Run Cursor 1
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor1.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor1.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor2">
            <summary>
                Interface for function Run Cursor 2
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor2.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCursor2.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCyclicRead">
            <summary>
                Interface for function Run Cyclic Read
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunCyclicRead.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagram">
            <summary>
                Interface for function Run Diagram
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagram.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramInfo">
            <summary>
                Interface for function Run Diagram Info
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramInfo.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramInfoPlausibility">
            <summary>
                Interface for function Run Diagram Info Plausibility
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramInfoPlausibility.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramParameters">
            <summary>
                Interface for function Run Diagram Parameters
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramParameters.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramParametersPlausibility">
            <summary>
                Interface for function Run Diagram Parameters Plausibility
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramParametersPlausibility.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramPlausibility">
            <summary>
                Interface for function Run Diagram Plausibility
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiagramPlausibility.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiscardMAPEditing">
            <summary>
                Interface for function Run Discard MAP Editing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiscardMAPEditing.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDiscardMAPEditing.ViaKey">
            <summary>
                Run via key
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDisplay">
            <summary>
                Interface for function Run Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunDisplay.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>Element: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP1">
            <summary>
                Interface for function Run Editable MAP 1
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP1.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP1.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP2">
            <summary>
                Interface for funtion Run Editable MAP 2
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP2.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditableMAP2.ViaContext">
            <summary>
                Run via Context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditCurveUnderCursor">
            <summary>
                Interface for function Run Edit Curve Under Cursor
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditCurveUnderCursor.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditMAP">
            <summary>
                Interface to start Envelope Curve functionality read MAP to edit
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEditMAP.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEndReadWrite">
            <summary>
                Interface to start Envelope Curve functionality stop curve reading
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEndReadWrite.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope1">
            <summary>
                Interface to use Envelope Curve -> Set Cursor -> Cursor 1 -> Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope1.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope1.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope2">
            <summary>
                Interface to use Envelope Curve -> Set Cursor -> Cursor 2 -> Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope2.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelope2.ViaContext">
            <summary>
                Run via context
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelopeCurve">
            <summary>
                Start menu Envelope Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunEnvelopeCurve.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFastForward">
            <summary>
                Interface to start Envelope Curve functionality fast forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFastForward.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFastReverse">
            <summary>
                Interface to start Envelope Curve functionality fast reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFastReverse.ViaMenu">
            <summary>
                Run via menu
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFirstCurve">
            <summary>
                Interface to start Envelope Curve functionality show first curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFirstCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunForward">
            <summary>
                Interface to start Envelope Curve functionality forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunForward.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunFree2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunHelp">
            <summary>
                Interface to open Envelope Curve menu help
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunHelp.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho2">
            <summary>
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunIdealEcho2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunLastCurve">
            <summary>
                Interface to start Envelope Curve functionality show last curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunLastCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunLayout">
            <summary>
                Interface to open Envelope Curve submenu layout
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunLayout.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMAP1">
            <summary>
                Interface to start Envelope Curve functionality read MAP
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMAP1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMAP2">
            <summary>
                Interface to start Envelope Curve functionality read MAP
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMAP2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMoveIdealEchoCurveToPeak">
            <summary>
                Interface to start Envelope Curve functionality move ideal echo curve to peak
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunMoveIdealEchoCurveToPeak.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunNewCurve">
            <summary>
                Interface to start Envelope Curve functionality new (empty) diagram, parameters and curve data
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunNewCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunNextCurve">
            <summary>
                Interface to start Envelope Curve functionality show next curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunNextCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff1">
            <summary>
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOff2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOverlappedCurves">
            <summary>
                Interface to start Envelope Curve functionality activate showing overlapped curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunOverlappedCurves.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParameters.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersInfo">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersInfo.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersInfoPlausibility">
            <summary>
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersInfoPlausibility.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersPlausibility">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunParametersPlausibility.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlayback">
            <summary>
                Interface to start Envelope Curve functionality playback curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlayback.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlaybackPause">
            <summary>
                Interface to start Envelope Curve functionality pause playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlaybackPause.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlaybackStop">
            <summary>
                Interface to start Envelope Curve functionality stop playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPlaybackStop.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPreviousCurve">
            <summary>
                Interface to start Envelope Curve functionality show previous curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunPreviousCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadCurve">
            <summary>
                Interface to start Envelope Curve functionality read single curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadDiagnosticCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadDiagnosticCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadReferenceCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReadReferenceCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunResetReadingRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunResetReadingRange.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunResetZoomArea">
            <summary>
                Interface to start Envelope Curve functionality reset zoom settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunResetZoomArea.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReverse">
            <summary>
                Interface to start Envelope Curve functionality reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunReverse.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSaveCurve">
            <summary>
                Interface to start Envelope Curve functionality save curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSaveCurve.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSetCursor">
            <summary>
                Interface to start Envelope Curve functionality set cursor
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSetCursor.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunStopEditMAP">
            <summary>
                Interface to start Envelope Curve functionality stop edit MAP
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunStopEditMAP.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunSubstractedSignal2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdBrokenProbe2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdCurve2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdEndOfProbe2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC1">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC1.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC1.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC2">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC2.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunTresholdGPC2.ViaContext">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunUndoZoom">
            <summary>
                Interface to start Envelope Curve functionality undo zoom
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunUndoZoom.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunWriteMAPToDevice">
            <summary>
                Interface to start Envelope Curve functionality write MAP to device
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Execution.IRunWriteMAPToDevice.ViaMenu">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Validation.IIsEditMapActive">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Menubar.Validation.IIsEditMapActive.IsActive">
            <summary>
            Opens then envelope curve menu and checks the edit map and stop edit map buttons. Closes menu afterwards
            </summary>
            <returns>true: if edit map button is not enabled and stop edit is enabled; false: everything else :-)</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenContents">
            <summary>
                Interface for function Open Contents
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenContents.ViaIcon">
            <summary>
                Open via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenCyclicReadSettings">
            <summary>
                Interface for funtion Open Cyclic Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenCyclicReadSettings.ViaIcon">
            <summary>
                Open via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenLoadCurve">
            <summary>
                Interface for function Open Load Curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenLoadCurve.ViaIcon">
            <summary>
                Via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenReadSettings">
            <summary>
                Interface for function Open Read Settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenReadSettings.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenSelectedCurves">
            <summary>
                Interface for function Open Selected Curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IOpenSelectedCurves.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunClearPlotDisplay">
            <summary>
                Interface for function Run Clear Plot Display
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunClearPlotDisplay.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunCyclicRead">
            <summary>
                Interface for function Run Cyclic Read
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunCyclicRead.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunEndReadWrite">
            <summary>
                Interface to start Envelope Curve functionality stop curve reading
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunEndReadWrite.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFastForward">
            <summary>
                Interface to start Envelope Curve functionality fast forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFastForward.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFastReverse">
            <summary>
                Interface to start Envelope Curve functionality fast reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFastReverse.ViaIcon">
            <summary>
                Run via icon
            </summary>
            <returns>
                <br>True: if element was found and clicked</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFirstCurve">
            <summary>
                Interface to start Envelope Curve functionality show first curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunFirstCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunForward">
            <summary>
                Interface to start Envelope Curve functionality forward playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunForward.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunLastCurve">
            <summary>
                Interface to start Envelope Curve functionality show last curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunLastCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunNewCurve">
            <summary>
                Interface to start Envelope Curve functionality new (empty) diagram, parameters and curve data
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunNewCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunNextCurve">
            <summary>
                Interface to start Envelope Curve functionality show next curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunNextCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlayback">
            <summary>
                Interface to start Envelope Curve functionality playback curves
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlayback.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlaybackPause">
            <summary>
                Interface to start Envelope Curve functionality pause playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlaybackPause.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlaybackStop">
            <summary>
                Interface to start Envelope Curve functionality stop playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPlaybackStop.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPreviousCurve">
            <summary>
                Interface to start Envelope Curve functionality show previous curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunPreviousCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadCurve">
            <summary>
                Interface to start Envelope Curve functionality read single curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadDiagnosticCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadDiagnosticCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadReferenceCurve">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReadReferenceCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunResetReadingRange">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunResetReadingRange.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunResetZoomArea">
            <summary>
                Interface to start Envelope Curve functionality reset zoom settings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunResetZoomArea.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReverse">
            <summary>
                Interface to start Envelope Curve functionality reverse playback
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunReverse.ViaIcon">
            <summary>
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunSaveCurve">
            <summary>
                Interface to start Envelope Curve functionality save curve
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunSaveCurve.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunUndoZoom">
            <summary>
                Interface to start Envelope Curve functionality undo zoom
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.MenuArea.Toolbar.Execution.IRunUndoZoom.ViaIcon">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
                Interface for validation IsDTMConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                Interface for validation IsDTMDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
                Interface for WaitUntilDTMIsConnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
                Interface for validation WaitUntilDTMIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EnvelopeCurve.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.ICloseModule">
            <summary>
                Provides methods for flow ICloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.ICloseModule.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IRefresh">
            <summary>
                Interface for funtion Refresh of module Event List
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IRefresh.Run">
            <summary>
                Refresh module Event List
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Flows.IRefresh.Run(System.Int32)">
            <summary>
                Refresh module Event List
            </summary>
            <param name="timeoutInSeconds">Time until action must be finished</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for function ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent">
            <summary>
            The Event interface.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.Date">
            <summary>
            Gets or sets the date.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.EventName">
            <summary>
            Gets or sets the event name.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.EventNumber">
            <summary>
            Gets or sets the event number.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.OperationHours">
            <summary>
            Gets or sets the operation hours.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent.ToString">
            <summary>
            Adds all properties to one String
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for function IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IRunRefresh">
            <summary>
                Interface for Action area at module Compare
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IRunRefresh.Run">
            <summary>
                Start refreshing
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITableFunctions">
            <summary>
            The TableFunctions interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITableFunctions.GetEvent(System.Int32,System.Collections.Generic.IList{EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.IEvent})">
            <summary>
            Returns event from earlier generated list according to event number given by user
            </summary>
            <param name="eventNumber">
            Event number given by the user
            </param>
            <param name="eventList">
            List containing entire event list
            </param>
            <returns>
            <br>String result: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITableFunctions.ReadEvents">
            <summary>
                Reads the entire event list and creates a list with the events
            </summary>
            <returns>
                <br>IList: if event list was created successfully</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITableFunctions.GetNumberOfEvents">
            <summary>
            Gets the number of events.
            </summary>
            <returns>The number of events.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
            
            </summary>
            <param name="adapter"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
            
            </summary>
            <param name="button"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
            
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IReading">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IReading.IsReading">
            <summary>
                Checks if reading is active
            </summary>
            <returns>
                <br>True: if reading is active</br>
                <br>False: if reading is inactive</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IReading.WaitUntilReadingFinished(System.Int32)">
            <summary>
                Waits until reading is finished
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if reading is finished in time</br>
                <br>False: if module is not finished in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
                validation method
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                validation method
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
                validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
                Provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.EventList.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
                validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IAssignChannelsRandomly">
            <summary>
            The AssignChannelsRandomly interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IAssignChannelsRandomly.Run">
            <summary>
            Sets all channels to a more or less random value
            </summary>
            <returns><c>true</c> if channels set, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckChannelAssignment">
            <summary>
                Interface of CheckChannelAssignment
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckChannelAssignment.Run(System.Int32[],System.String[])">
            <summary>
                Opens tab statistic and checks actual channel assignment
            </summary>
            <param name="channelNumber">Channel numbers for the channels which should be checked</param>
            <param name="assignment">According assignment for every channel which should be checked</param>
            <returns>
                true: If actual channel assignments match the user given ones
                false: If an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckDiagram">
            <summary>
            Interface ICheckDiagram
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckDiagram.Run">
            <summary>
            Selects the tab diagram data and makes a screenshot.
            </summary>
            <returns><c>true</c> if successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckGUIAfterOpeningOrDeleting">
            <summary>
                Interface of CheckGUIAfterOpeningModuleOrDeletingHistoromData.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckGUIAfterOpeningOrDeleting.Run">
            <summary>
                Method to check whether eventlist+statitic results are empty
            </summary>
            <returns>
                true: if they are empty
                false: if they are not empty or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckGUIAfterReadingOrLoading">
            <summary>
                Interface of CheckGUIAfterReadingOrLoading.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckGUIAfterReadingOrLoading.Run">
            <summary>
                Method to check whether eventlist+statitic results contain values after reading
            </summary>
            <returns>
                true: if they contain values
                false: if they are empty or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckStatusInfo">
            <summary>
                Description of ICheckStatusInfo.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICheckStatusInfo.Run">
            <summary>
                Calls a method to check the status information (down left corner of the module) for errors or failures
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICloseModule">
            <summary>
                Interface of CloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IConfigureSettingsTab">
            <summary>
            Interface IConfigureSettingsTab
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IConfigureSettingsTab.Run(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures the HistoRom settings.
            </summary>
            <param name="assignChannel1">
            Assignment for channel1. Use string.empty if you do not want to modify this parameter.
            </param>
            <param name="assignChannel2">
            Assignment for channel2.Use string.empty if you do not want to modify this parameter.
            </param>
            <param name="assignChannel3">
            Assignment for channel3.Use string.empty if you do not want to modify this parameter.
            </param>
            <param name="assignChannel4">
            Assignment for channel4.Use string.empty if you do not want to modify this parameter.
            </param>
            <param name="loggingInterval">
            The logging interval.Use string.empty if you do not want to modify this parameter.
            </param>
            <param name="clearLoggingData">
            Clear logging data.Use string.empty if you do not want to modify this parameter.
            </param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IDeleteHistoROMData">
            <summary>
                Interface of DeleteHistoROMData.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IDeleteHistoROMData.Run">
            <summary>
                Deletes historom data via new button then opens tab table/statistic and checks if eventlist/textfields is/are empty
            </summary>
            <returns>
                true: if all data has been erased
                false: if data has not been erased or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IExportHistorom">
            <summary>
                Interface of ExportHistorom.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IExportHistorom.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IExportHistorom.Run(System.String)">
            <summary>
            Exports file with given filename, replaces already existing file with same filename
            </summary>
            <param name="fileName">
            Filename for export
            </param>
            <returns>
            true: if file was exported successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ILoadFile">
            <summary>
                Interface of LoadFile.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ILoadFile.Run">
            <summary>
            Save curve(s) with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ILoadFile.Run(System.String)">
            <summary>
            load a file with specified file name, checks whether statistic results and event list contain values after loading
            </summary>
            <param name="fileName">
            User specified filename
            </param>
            <returns>
            true: if loading was successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOffline">
            <summary>
                Interface of OpenModuleOffline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOffline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOnline">
            <summary>
                Interface of OpenModuleOnline.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IReadWithoutWaiting">
            <summary>
                Interface of ReadWithoutWaiting.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IReadWithoutWaiting.RunViaIcon">
            <summary>
                Read the eventlist via icon, checks if reading has really started (timeout = iTimeoutLong)
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IReadWithWaiting">
            <summary>
                Interface of ReadWithWaiting.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IReadWithWaiting.RunViaIcon">
            <summary>
                Read eventlist within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.IReadWithWaiting.RunViaIcon(System.Int32)">
            <summary>
                Read eventlist within a specific time
            </summary>
            <param name="timeOutInMilliseconds">Time within reading must be finished</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ISaveFile">
            <summary>
                Description of ISaveFile.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ISaveFile.Run">
            <summary>
                Saves current Historom data via Save button
            </summary>
            <returns>
                true: if call worked fine
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ISaveFileAs">
            <summary>
                Description of ISaveFileAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ISaveFileAs.Run">
            <summary>
            Save HISTOROM data with default file name in report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Flows.ISaveFileAs.Run(System.String)">
            <summary>
            Saves file under given filename, replaces already existing files with same filename
                FILE WATCHER will check if file has been created or modified
            </summary>
            <param name="fileName">
            Filename under which file is saved
            </param>
            <returns>
            true: if file was saved successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IChangeChannelAssignment">
            <summary>
                Interface of ChangeChannelAssignment
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IChangeChannelAssignment.Run(System.Int32,System.String)">
            <summary>
                Changes the channel assignment for a given channel to a given value
            </summary>
            <param name="channelNumber">Channel for which channel assignment should be changed</param>
            <param name="inputValue">New channel assignment</param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Interface of CloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Close module via tab at related tab control
            </summary>
            <param name="moduleToClose">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent">
            <summary>
                Interface of Event.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.EventNumber">
            <summary>
                Property eventNumber
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Date">
            <summary>
                Property date
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.OperationHours">
            <summary>
                Property OperationHours
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.EventName">
            <summary>
                Property EventName
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Description">
            <summary>
                Property Description
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Channel1">
            <summary>
                Property Channel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Channel2">
            <summary>
                Property Channel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Channel3">
            <summary>
                Property Channel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.Channel4">
            <summary>
                Property Channel4
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent.ToString">
            <summary>
                Override toString method
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Description of IOpenModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Open module via frame menu within a specific time
            </summary>
            <param name="moduleToOpen">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IRunSelectTab">
            <summary>
                Interface of RunSelectTab.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IRunSelectTab.Run(System.Int32)">
            <summary>
                Selects a tab within module HistoROM
            </summary>
            <param name="tabIndex">
                Index of the tab the caller wants to have selected
            </param>
            <returns>
                true: if tab has been selected successfully
                flase: if something went wrong
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IRunSelectTab.Run(System.String)">
            <summary>
                Selects a tab within module HistoROM
            </summary>
            <param name="tabName">
                Name of the tab the caller wants to have selected
            </param>
            <returns>
                true: if tab has been selected successfully
                flase: if something went wrong
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings">
            <summary>
                Interface of Settings
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.SaveIntervall">
            <summary>
            Gets the save intervall.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.SetLoggingInterval(System.String)">
            <summary>
                Modifies the "Logging interval" parameter (tab Settings)
            </summary>
            <param name="inputValue">new value for logging interval</param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.GetComboBoxValues">
            <summary>
                Creates a list with all possible channel assignments from the combobox assign channel 1
            </summary>
            <returns>
                parameterList: when call worked fine
                null: if an error ocurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.GetListItem(System.String)">
            <summary>
                Get a specified list item of a combo box when list is shown.
            </summary>
            <param name="selectValue">comboBox item to select</param>
            <returns>Listitem to select</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.SetComboBoxValue(Ranorex.Core.Element,System.String,Ranorex.Core.Element)">
            <summary>
                Sets the value for a given combobox
            </summary>
            <param name="comboBox">combobox which will be modified</param>
            <param name="inputValue">value which will be selected within the combobox</param>
            <param name="statusIcon">element which contains the status icon for the given combobox</param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ISettings.ClearLoggingData(System.String)">
            <summary>
            Clears the logging data.
            </summary>
            <param name="value">The value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic">
            <summary>
                Interface of Statistic.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.NumberValuesPerChannel">
            <summary>
                Property NumberValuesPerChannel
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.LoggingInterval">
            <summary>
                Property LoggingInterval
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.TimeFirstValue">
            <summary>
                Property TimeFirstValue
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.TimeLastValue">
            <summary>
                Property TimeLastValue
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MeanValueChannel1">
            <summary>
                Property MeanValueChannel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.StandardDeviationChannel1">
            <summary>
                Property StandardDeviationChannel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MinimumChannel1">
            <summary>
                Property MinimumChannel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MaximumChannel1">
            <summary>
                Property MaximumChannel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.RangeChannel1">
            <summary>
                Property RangeChannel1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MeanValueChannel2">
            <summary>
                Property MeanValueChannel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.StandardDeviationChannel2">
            <summary>
                Property StandardDeviationChannel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MinimumChannel2">
            <summary>
                Property MinimumChannel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MaximumChannel2">
            <summary>
                Property MaximumChannel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.RangeChannel2">
            <summary>
                Property RangeChannel2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MeanValueChannel3">
            <summary>
                Property MeanValueChannel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.StandardDeviationChannel3">
            <summary>
                Property StandardDeviationChannel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MinimumChannel3">
            <summary>
                Property MinimumChannel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MaximumChannel3">
            <summary>
                Property MaximumChannel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.RangeChannel3">
            <summary>
                Property RangeChannel3
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MeanValueChannel4">
            <summary>
                Property MeanValueChannel4
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.StandardDeviationChannel4">
            <summary>
                Property StandardDeviationChannel4
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MinimumChannel4">
            <summary>
                Property MinimumChannel4
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.MaximumChannel4">
            <summary>
                Property MaximumChannel4
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IStatistic.RangeChannel4">
            <summary>
                Property RangeChannel4
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITabContainer">
            <summary>
                Interface of ITabContainer.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITabContainer.SelectTabTable">
            <summary>
                method to select tab "table"
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITabContainer.SelectTabGraphic">
            <summary>
                method to select tab "graphic"
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITabContainer.SelectTabStatistic">
            <summary>
                method to select tab "statistic"
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITabContainer.SelectTabSettings">
            <summary>
                select tab "settings"
            </summary>
            <returns>
                <br>True: if selection worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITable">
            <summary>
                Interface of ITable.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITable.GetEvent(System.Int32,System.Collections.Generic.IList{EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.IEvent})">
            <summary>
            Returns event according to event number given by user
            </summary>
            <param name="eventNumber">
            Event number given by the user
            </param>
            <param name="eventList">
            List containing entire histoRom event list
            </param>
            <returns>
            <br>String result: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITable.GetNumberOfEvents">
            <summary>
            Gets the number of events.
            </summary>
            <returns>The number of events.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITable.ReadEvents">
            <summary>
                Reads the entire HistoRom event list and creates a list with the events
            </summary>
            <returns>
                <br>IList: if event list was created successfully</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations">
            <summary>
                Description of EventlistOperations.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsOperationInProgress">
            <summary>
                Searches for button "Operation in Progress" in the lower statusbar of the module(found while reading)
            </summary>
            <returns>
                true: if button is found
                false: if button is not found
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.WaitUntilReadFinished(System.Int32)">
            <summary>
                Waits until Historom Eventlist reading is finished
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if reading is finished in time</br>
                <br>False: if reading is not finished in time</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsReadStarted(System.Int32)">
            <summary>
                Checks if Reading is started, progressbar must be visible one time, cancel button active, read inactive
            </summary>
            <param name="timeOutInMilliseconds">Time within reading should have started</param>
            <returns>
                <br>True: if reading has started (progessbar is visible,cancel active, read inactive)</br>
                <br>False: if reading has not started in time</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsReadFinished">
            <summary>
                Checks if Reading is finished on the basis of read and cancel buttons and the progressbar
            </summary>
            <returns>
                true: when button read is active, cancel inactive and progressbar is not visible
                false: when state is not as mentioned above
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsReading">
            <summary>
                Checks if Historom is in reading mode: progressbar must be visible, cancel button active and read button inactive
            </summary>
            <returns>
                <br>True: if module is reading curves</br>
                <br>False: if module is not reading curves</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsEventlistEmpty">
            <summary>
                Checks whether HistoROM eventlist is empty or not
            </summary>
            <returns>
                true if list is empty
                false if list is not empty
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsReadButtonActive">
            <summary>
                Determines whether the read button in histrom toolbar is active/inactive
            </summary>
            <returns>
                true: if button is enabled
                false: if button is not enabled
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IEventlistOperations.IsCancelButtonActive">
            <summary>
                Determines whether the cancel button in histrom toolbar is active/inactive
            </summary>
            <returns>
                true: if button is enabled
                false: if button is not enabled
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="adapter">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IParameterStates">
            <summary>
                Description of IParameterStates.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IParameterStates.WaitForParameterUpdate(Ranorex.Core.Element)">
            <summary>
                Waits for parameter update after writing
            </summary>
            <param name="control">control which contains the status icon for the parameter which has been modified</param>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IStatisticResults">
            <summary>
                Description of IStatisticResults.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IStatisticResults.IsChannelAssignmentCorrect(System.Int32,System.String)">
            <summary>
                Compares the actual channel assignment with a user given value
            </summary>
            <param name="channel">Channel number</param>
            <param name="selection">Assignment given by the user</param>
            <returns>
                true:	If user given assigment and actual assignment match
                false: If an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IStatisticResults.HasStatisticTabValues">
            <summary>
                Checks whether the tab statistic contains any values
            </summary>
            <returns>
                true: if at least on textbox contains a value
                false: all textboxes are empty
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenExport">
            <summary>
                Interface of OpenExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenExport.ViaIcon">
            <summary>
                Open Export via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenHelp">
            <summary>
                Description of IOpenHelp.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenHelp.ViaIcon">
            <summary>
                Start read via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenLoad">
            <summary>
                Interface of OpenLoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenLoad.ViaIcon">
            <summary>
                Open Load via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenNew">
            <summary>
                Interface of OpenNew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenNew.ViaIcon">
            <summary>
                Open New via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenResetZoom">
            <summary>
                Interface of OpenResetZoom.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenResetZoom.ViaIcon">
            <summary>
                Open Reset Zoom via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenSave">
            <summary>
                Interface of OpenSave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenSave.ViaIcon">
            <summary>
                Open save via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs">
            <summary>
                Interface of OpenSaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs.ViaIcon">
            <summary>
                Open save as via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenScrollDown">
            <summary>
                Interface of OpenScrollDown.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenScrollDown.ViaIcon">
            <summary>
                Open scroll down in via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenScrollUp">
            <summary>
                Interface of OpenScrollUp.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenScrollUp.ViaIcon">
            <summary>
                Open scroll up in via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenZoomIn">
            <summary>
                Interface of OpenZoomIn.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenZoomIn.ViaIcon">
            <summary>
                Open zoom in via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenZoomOut">
            <summary>
                Interface of OpenZoomOut.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IOpenZoomOut.ViaIcon">
            <summary>
                Open zoom out via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IRunCancelRead">
            <summary>
                Interface of RunCancelRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IRunCancelRead.ViaIcon">
            <summary>
                Cancel read via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IRunRead">
            <summary>
                Interface of RunRead.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.MenuArea.Toolbar.Execution.IRunRead.ViaIcon">
            <summary>
                Start read via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Execution.IStatusBar">
            <summary>
                Interface of IStatusBar.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Execution.IStatusBar.ConnectionState">
            <summary>
                Property connection state
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
                Description of IIsDtmConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
                Determines whether dtm (historom module) is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                Description of IIsDtmDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                Determines whether dtm (historom module) is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Usermessages.Execution.IInformation">
            <summary>
                Interface of Messages.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Usermessages.Execution.IInformation.CheckIfInfoContains(System.String)">
            <summary>
            Analysis status information string in down left corner of the module whether it contains a user given string
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            true: if no error or failure was detected
                false: if an error or failure was detected
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Historom.Functions.StatusArea.Usermessages.Execution.IInformation.CheckInfo">
            <summary>
                Analysis status information string
            </summary>
            <returns>
                true: 	if no error or failure was detected
                false:  if an error or failure was detected
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.ICloseModule">
            <summary>
            The CloseModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureCylindricalTankStanding">
            <summary>
            The ConfigureCylindricalTankStanding interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureCylindricalTankStanding.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Selects tank type 'cylindrical tank standing' and configures its parameter if needed. Use empty strings if you do not want to configure a parameter.
            </summary>
            <param name="height">
            The height.
            </param>
            <param name="diameter">
            The diameter.
            </param>
            <param name="length">
            The length.
            </param>
            <param name="ceilingType">
            The ceiling Type.
            </param>
            <param name="bottomType">
            The bottom Type.
            </param>
            <param name="wallThickness">
            The wall Thickness.
            </param>
            <param name="ceilingHeight">
            The ceiling Height.
            </param>
            <param name="ceilingWidth">
            The ceiling Width.
            </param>
            <param name="bottomHeight">
            The bottom Height.
            </param>
            <param name="bottomWidth">
            The bottom Width.
            </param>
            <returns>
            <c>true</c> if configuration was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureGeneralSettings">
            <summary>
            Interface IConfigureGeneralSettings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureGeneralSettings.Run(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Opens the tab Settings and configures the General Settings parameter. Use string.empty if you want to skip a parameter.
            </summary>
            <param name="linearizationType">
            The linearization type.
            </param>
            <param name="emptyCalibration">
            The empty calibration.
            </param>
            <param name="fullCalibration">
            The full calibration.
            </param>
            <param name="distanceUnit">
            The distance unit.
            </param>
            <param name="levelUnit">
            The level unit.
            </param>
            <returns>
            <c>true</c> if configuration successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureHorizontalCylindricalTank">
            <summary>
            The ConfigureHorizontalCylindricalTank interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureHorizontalCylindricalTank.Run(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Selects tank type 'Horizontal cylindrical tank' and configures its parameter if needed. Use empty strings if you do not want to configure a parameter.
            </summary>
            <param name="height">
            The height.
            </param>
            <param name="diameter">
            The diameter.
            </param>
            <param name="length">
            The length.
            </param>
            <param name="angle">
            The angle.
            </param>
            <param name="endTypeRight">
            The end Type Right.
            </param>
            <param name="endTypeLeft">
            The end Type Left.
            </param>
            <param name="wallThickness">
            The wall Thickness.
            </param>
            <param name="changePosition">
            The change Position.
            </param>
            <returns>
            <c>true</c> if configuration was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureModularTank">
            <summary>
            The ConfigureModularTank interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureModularTank.Run(System.String,System.String)">
            <summary>
            Selects tank type 'Modular tank' and configures its parameter if needed. Use empty strings if you do not want to configure a parameter.
            </summary>
            <param name="height">
            The height.
            </param>
            <param name="view">
            The view.
            </param>
            <returns>
            <c>true</c> if configuration was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureModularTanksCircular">
            <summary>
            The ConfigureModularTanksCircular interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureModularTanksCircular.Run(System.String)">
            <summary>
            Selects tank type 'Modular tank' and configures its parameter if needed. Use empty strings if you do not want to configure a parameter.
            </summary>
            <param name="height">
            The height.
            </param>
            <returns>
            <c>true</c> if configuration was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureSphericalTank">
            <summary>
            The ConfigureSphericalTank interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureSphericalTank.Run(System.String,System.String)">
            <summary>
            Selects tank type 'Spherical tank' and configures its parameter if needed. Use empty strings if you do not want to configure a parameter.
            </summary>
            <param name="height">
            The height.
            </param>
            <param name="diameter">
            The diameter.
            </param>
            <returns>
            <c>true</c> if configuration was successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureUserSettings">
            <summary>
            Interface IConfigureUserSettings
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IConfigureUserSettings.Run(System.String)">
            <summary>
            Opens the tab Settings and configures the User Settings parameter.
            </summary>
            <param name="unitAfterLinearization">
            The unit after linearization.
            </param>
            <returns>
            <c>true</c> if configuration successful, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IExport">
            <summary>
            The Export interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IExport.Run">
            <summary>
            Export Linearization data with default file name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IExport.Run(System.String)">
            <summary>
            Exports the a Linearization file.
            </summary>
            <param name="fileName">
            Name and path of the file. E.g. C:\Test\testData 
            </param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IImport">
            <summary>
            The Import interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IImport.Run">
            <summary>
            Export Linearization data with default file name to report folder
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IImport.Run(System.String)">
            <summary>
            Imports Linearization data via toolbar icon
            </summary>
            <param name="filename">
            filename (and path)of dataset which should be imported
            </param>
            <returns>
            true, if file was imported successfully; false, if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOffline">
            <summary>
            The OpenModuleOffline interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOffline.Run">
            <summary>
             Open module via frame menu within a default time
            </summary>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOnline">
            <summary>
            The OpenModuleOnline interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IRead">
            <summary>
            The Read interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IRead.Run(System.Int32)">
            <summary>
            Writes to device
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            true: if reading finished successfully; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IWrite">
            <summary>
            The Write interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Flows.IWrite.Run(System.Int32)">
            <summary>
            Writes to device
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            true: if writing finished successfully; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnCalculateTable">
            <summary>
            The ClickOnCalculateTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnCalculateTable.Run">
            <summary>
            Clicks the calculate button.
            </summary>
            <returns>
            True: if button is found and clicked; False: otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnRead">
            <summary>
            The ClickOnRead interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnRead.Run">
            <summary>
            Mouse click on the button Read
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnWrite">
            <summary>
            The ClickOnWrite interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IClickOnWrite.Run">
            <summary>
            Mouse click on the button Write
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab">
            <summary>
            The ConfigureSettingsTab interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsDistanceUnit">
            <summary>
            Gets the general settings distance unit.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsEmptyCalibration">
            <summary>
            Gets the general settings empty calibration.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsFullCalibration">
            <summary>
            Gets the general settings full calibration.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsLevelUnit">
            <summary>
            Gets the general settings level unit.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsLinearizationType">
            <summary>
            Gets the type of the general settings linearization.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetGeneralSettingsOutputMode">
            <summary>
            Gets the general settings output mode.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetUserSettingsDeviceName">
            <summary>
            Gets the name of the user settings device.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetUserSettingsDeviceTag">
            <summary>
            Gets the user settings device tag.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.GetUserSettingsUnitAfterLinearization">
            <summary>
            Gets the user settings unit after linearization.
            </summary>
            <returns>
            Text value.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsDistanceUnit(System.String)">
            <summary>
            Sets the general settings distance unit.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsEmptyCalibration(System.String)">
            <summary>
            Sets the general settings empty calibration.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsFullCalibration(System.String)">
            <summary>
            Sets the general settings full calibration.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsLevelUnit(System.String)">
            <summary>
            Sets the general settings level unit.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsLinearizationType(System.String)">
            <summary>
            Sets the type of the general settings linearization.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetGeneralSettingsOutputMode(System.String)">
            <summary>
            Sets the general settings output mode.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureSettingsTab.SetUserSettingsUnitAfterLinearization(System.String)">
            <summary>
            Sets the user settings unit after linearization.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter">
            <summary>
            The ConfigureTankParameter interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankAngle">
            <summary>
            Gets the horizontal cylindrical tank angle.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankChangePosition">
            <summary>
            Gets the horizontal cylindrical tank change position.
            </summary>
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankDiameter">
            <summary>
            Gets the horizontal cylindrical tank diameter.
            </summary>       
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankEmpty">
            <summary>
            Gets the horizontal cylindrical tank empty.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankEndTypeLeft">
            <summary>
            Gets the horizontal cylindrical tank end type left.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankEndTypeRight">
            <summary>
            Gets the horizontal cylindrical tank end type right.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankFull">
            <summary>
            Gets the horizontal cylindrical tank full.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankHeight">
            <summary>
            Gets the height of the horizontal cylindrical tank.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankLength">
            <summary>
            Gets the length of the horizontal cylindrical tank.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingBottomHeight">
            <summary>
            Gets the height of the horizontal cylindrical tank standing bottom.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingBottomType">
            <summary>
            Gets the type of the horizontal cylindrical tank standing bottom.
            </summary>
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingBottomWidth">
            <summary>
            Gets the width of the horizontal cylindrical tank standing bottom.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingCeilingHeight">
            <summary>
            Gets the height of the horizontal cylindrical tank standing ceiling.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingCeilingType">
            <summary>
            Gets the type of the horizontal cylindrical tank standing ceiling.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingCeilingWidth">
            <summary>
            Gets the width of the horizontal cylindrical tank standing ceiling.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingEmpty">
            <summary>
            Gets the horizontal cylindrical tank standing empty.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingFull">
            <summary>
            Gets the horizontal cylindrical tank standing full.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingHeight">
            <summary>
            Gets the height of the horizontal cylindrical tank standing.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingInternalDiameter">
            <summary>
            Gets the horizontal cylindrical tank standing internal diameter.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingLength">
            <summary>
            Gets the length of the horizontal cylindrical tank standing.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankStandingWallThickness">
            <summary>
            Gets the horizontal cylindrical tank standing wall thickness.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetHorizontalCylindricalTankWallThickness">
            <summary>
            Gets the horizontal cylindrical tank standard wall thickness.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankCircularEmpty">
            <summary>
            Gets the modular tank circular empty.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankCircularFull">
            <summary>
            Gets the modular tank circular full.
            </summary>
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankCircularHeight">
            <summary>
            Gets the height of the modular tank circular.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankEmpty">
            <summary>
            Gets the modular tank empty.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankFull">
            <summary>
            Gets the modular tank full.
            </summary>        
            <returns>Text value</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankHeight">
            <summary>
            Gets the height of the modular tank.
            </summary>
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetModularTankView">
            <summary>
            Gets the modular tank view.
            </summary>
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetSphericalTankDiameter">
            <summary>
            Gets the spherical tank diameter.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetSphericalTankEmpty">
            <summary>
            Gets the spherical tank empty.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetSphericalTankFull">
            <summary>
            Gets the spherical tank full.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.GetSphericalTankHeight">
            <summary>
            Gets the height of the spherical tank.
            </summary>        
            <returns>Text value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankAngle(System.String)">
            <summary>
            Sets the horizontal cylindrical tank angle.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankChangePosition(System.String)">
            <summary>
            Sets the horizontal cylindrical tank change position.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankDiameter(System.String)">
            <summary>
            Sets the horizontal cylindrical tank diameter.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankEndTypeLeft(System.String)">
            <summary>
            Sets the horizontal cylindrical tank end type left.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankEndTypeRight(System.String)">
            <summary>
            Sets the horizontal cylindrical tank end type right.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankHeight(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankLength(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingBottomHeight(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank standing bottom.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingBottomType(System.String)">
            <summary>
            Sets the type of the horizontal cylindrical tank standing bottom.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingBottomWidth(System.String)">
            <summary>
            Sets the width of the horizontal cylindrical tank standing bottom.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingCeilingHeight(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank standing ceiling.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingCeilingType(System.String)">
            <summary>
            Sets the type of the horizontal cylindrical tank standing ceiling.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingCeilingWidth(System.String)">
            <summary>
            Sets the Width of the horizontal cylindrical tank standing ceiling.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingHeight(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank standing.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingInternalDiameter(System.String)">
            <summary>
            Sets the horizontal cylindrical tank standing internal diameter.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingLength(System.String)">
            <summary>
            Sets the horizontal cylindrical tank standing internal diameter.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankStandingWallThickness(System.String)">
            <summary>
            Sets the horizontal cylindrical tank standing wall thickness.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetHorizontalCylindricalTankWallThickness(System.String)">
            <summary>
            Sets the height of the horizontal cylindrical tank.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetModularTankCircularHeight(System.String)">
            <summary>
            Sets the height of the modular tank circular.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetModularTankHeight(System.String)">
            <summary>
            Sets the height of the modular tank.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetModularTankView(System.String)">
            <summary>
            Sets the modular tank view.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetSphericalTankDiameter(System.String)">
            <summary>
            Sets the spherical tank diameter.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IConfigureTankParameter.SetSphericalTankHeight(System.String)">
            <summary>
            Sets the height of the spherical tank.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            <c>true</c> if set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IEditParameter">
            <summary>
                Provides methods for editing different parameter types
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IEditParameter.SetParameterValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a specific control to a specific value
            </summary>
            <param name="element">control to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IEditParameter.GetParameterValue(Ranorex.Core.Element)">
            <summary>
                Get value of a specific control
            </summary>
            <param name="element">control to get the value from</param>
            <returns>
                <br>String: if everything worked fine</br>
                <br>Empty String: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable">
            <summary>
            The GetValuesFromTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.AllValues">
            <summary>
            Gets all values from table and stores them in a list.
            </summary>
            <returns>List with all table values.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.SingleValue(System.Int32,System.Int32)">
            <summary>
            Returns the value for a specified row and column
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <returns>
            The value for the row and column.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.PrintAllValuesInReport">
            <summary>
            Prints all linearization table values in report.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISelectTab">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISelectTab.Run(System.Int32)">
            <summary>
                Select a tab with specified tabindex
            </summary>
            <param name="index">Tabindex to select</param>
            <returns>
                <br>True: if selection worked </br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetCalculationSteps">
            <summary>
            The SetCalculationSteps interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetCalculationSteps.Run(System.String)">
            <summary>
            Sets the number of calculation steps
            </summary>
            <param name="numberOfCalculationSteps">
            The number of calculation steps.
            </param>
            <returns>
            True: if number is set; False: if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetLevels">
            <summary>
            The SetLevels interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetLevels.Run(System.Int32)">
            <summary>
            Configures the Levels radio button
            </summary>
            <param name="index">
            The index which will be selected
            </param>
            <returns>
            True: if radio button is configured; False: if otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetLevels.Run(System.String)">
            <summary>
            Configures the Levels radio button
            </summary>
            <param name="level">
            The level which will be selected
            </param>
            <returns>
            True: if radio button is configured; False: if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetStartVolume">
            <summary>
            The SetStartVolume interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetStartVolume.Run(System.Int32)">
            <summary>
            Configures the Start Volume radio button
            </summary>
            <param name="index">
            The index which will be selected
            </param>
            <returns>
            True: if radio button is configured; False: if otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetStartVolume.Run(System.String)">
            <summary>
            Configures the Start Volume radio button
            </summary>
            <param name="startVolume">
            The level which will be selected
            </param>
            <returns>
            True: if radio button is configured; False: if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetTableValues">
            <summary>
            The SetTableValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetTableValues.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetTankType">
            <summary>
            The SetTankType interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ISetTankType.Run(System.String)">
            <summary>
            Sets the tank type 
            </summary>
            <param name="type">Tank type which will be set</param>
            <returns>True: if the tank type was set; False: if otherwise</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.ICompareValues">
            <summary>
            The CompareValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.ICompareValues.AreValuesEqual(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Double)">
            <summary>
            Determines whether values of two lists representing the Linearization table are equal
            </summary>
            <param name="values">
            The values.
            </param>
            <param name="referenceValues">
            The reference values.
            </param>
            <param name="accuracy">
            The accuracy for the comparison of two double values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnExport">
            <summary>
            The ClickOnExport interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnExport.Run">
            <summary>
            Mouse click on the button Export
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnImport">
            <summary>
            The ClickOnImport interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnImport.Run">
            <summary>
            Mouse click on the button import
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnResetZoomArea">
            <summary>
            The ClickOnResetZoomArea interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnResetZoomArea.Run">
            <summary>
            Mouse click on the button reset zoom area
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartCa">
            <summary>
            The ClickOnStartCa interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartCa.Run">
            <summary>
            Mouse click on the button Start CA
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartDt">
            <summary>
            The ClickOnStartDT interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartDt.Run">
            <summary>
            Mouse click on the button StartDT.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartQh">
            <summary>
            The ClickOnStartQH interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnStartQh.Run">
            <summary>
            Mouse click on the button StartQH.
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnUndoZoom">
            <summary>
            The ClickOnUndoZoom interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnUndoZoom.Run">
            <summary>
            Mouse click on the button undo zoom
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnShowTable">
            <summary>
            The IClickOnShowTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.MenuArea.Toolbar.Execution.IClickOnShowTable.Run">
            <summary>
            Mouse click on the button show table
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Description of IsDtmConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Description of IsDTMDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting">
            <summary>
            The ReadingAndWriting interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.HasReadingStarted(System.Int32)">
            <summary>
            Validates whether reading from device started
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if progress bar(buttonOperationInProgress) is != null
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.HasWritingStarted(System.Int32)">
            <summary>
            Validates whether writing from device started
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if progress bar(buttonOperationInProgress) is != null
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsReadButtonActive">
            <summary>
            Determines whether [read button is active].
            </summary>
            <returns><c>true</c> if [read button is active]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsReading">
            <summary>
            Determines whether reading is active
            </summary>
            <returns>
            True: if reading is active. False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsWriteButtonActive">
            <summary>
            Determines whether [write button is active].
            </summary>
            <returns><c>true</c> if [write button is active]; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.IsWriting">
            <summary>
            Determines whether reading or writing is active
            </summary>
            <returns>
            True: if reading is active. False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilReadButtonAndWriteButtonAreActive(System.Int32)">
            <summary>
            Waits the until read button and write button are active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if read button and write button are active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilReadingIsFinished(System.Int32)">
            <summary>
            Waits until reading finished
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if reading is finished; False: otherwise
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IReadingAndWriting.WaitUntilWritingIsFinished(System.Int32)">
            <summary>
            Waits until writing is finished
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            True: if reading or writing is finished; False: otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected">
            <summary>
                Description of IWaitUntilDtmIsConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
            Interface for WaitUntilDtmIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages">
            <summary>
            The CheckUserNotificationMessages interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsError">
            <summary>
            Scans the user notification messages in the status area for error messages
            </summary>
            <returns>
            true:  if the text contains any of the keywords
            false:  if the text does not contain any of the keywords
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsString(System.String)">
            <summary>
            Checks whether the user message contains a particular string
            </summary>
            <param name="value">String to look for</param>
            <returns>
            true: if the user message contains the string
            false: if string is not found
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Linearization.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.UserMessage">
            <summary>
            The user message.
            </summary>
            <returns>
            The actual user message
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckParameterLockingState">
            <summary>
            The CheckParameterLockingState interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckParameterLockingState.Run(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Checks the locking state of a list of parameter. They can either be read only or writable.
            </summary>
            <param name="pathToParameter">
            A list with paths to parameter. A path looks like this: Micropilot 5x//Setup//Full calibration (4).
            </param>
            <param name="shouldBeReadOnly">
            The expected locking state of the parameter. True = read only; False = write able.
            </param>
            <returns>
            <c>true</c> if all parameter have the expected locking state, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckThatParameterAreNotInvalid">
            <summary>
            The CheckThatParameterAreNotInvalid interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckThatParameterAreNotInvalid.Run(System.Collections.Generic.List{System.String})">
            <summary>
            Examines the status of one or more parameter. Reports every parameter with the status 'Invalid';
            </summary>
            <param name="parameterToCheck">
            List with parameter to check. E.g. 'Micropilot 5x//Setup//Empty Calibration (3):, Micropilot 5x//Setup//Full Calibration (4):'
            </param>
            <returns>
            <c>true</c> if no parameter is found with status 'Invalid', <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckThatParameterAreNotInvalid.Run">
            <summary>
            Examines the status of all parameter the DTM contains. Reports every parameter with the status 'Invalid';
            </summary>
            <returns>
            <c>true</c> if no parameter is found with status 'Invalid', <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckThatParameterCannotBeSetToAnInvalidValue">
            <summary>
            The CheckThatParameterCannotBeSetToAnInvalidValue interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICheckThatParameterCannotBeSetToAnInvalidValue.Run(System.String,System.String)">
            <summary>
            Checks that a parameter cannot be set to an invalid or out of range value.
            </summary>
            <param name="pathToParameter">
            The path to the parameter. Use this form: Micropilot 5x//Setup//Full calibration (4):
            </param>
            <param name="invalidValue">
            An invalid value for this parameter. This could be an out of range value or invalid characters.
            </param>
            <returns>
            True, if the parameter refused the invalid value and was set back to the original value. False, otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOffline">
            <summary>
                Provides methods for flow ICloseModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOffline.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOffline.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOnline">
            <summary>
                Provides methods for flow ICloseModuleOnline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOnline.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.ICloseModuleOnline.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetAllParameter">
            <summary>
            The GetAllParameter interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetAllParameter.Run">
            <summary>
            The run.
            </summary>
            <returns>
            The <see cref="T:Ranorex.List"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetInvalidParametersInTreeView">
            <summary>
                Provides methods for flow IGetInvalidParametersInTreeView
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetInvalidParametersInTreeView.Run">
            <summary>
                Methods to get invalid parameters in tree view
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetParameterStatus">
            <summary>
            The GetParameterStatus interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetParameterStatus.FromHeaderParameter(System.String)">
            <summary>
            Gets the current status of a specified parameter from the dtm identification area (header).
            </summary>
            <param name="parameterName">
            The parameter name.
            </param>
            <returns>
            The current status of the parameter.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IGetParameterStatus.FromParameter(System.String)">
            <summary>
            Gets the current status of a specified parameter from the dtm.
            </summary>
            <param name="pathToParameter">
            The parameter name and path. E.g. 'Micropilot 5x//Setup//Full calibration (4):'.
            </param>
            <returns>
            The current status of the parameter.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IResetDevice">
            <summary>
            The ResetDevice interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Flows.IResetDevice.Run(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Reset a device via Online Parameterization.
            </summary>
            <param name="pathToResetParameter">
            The path to the reset parameter. Use this form: Promass 100//Expert//System//Administration//Device reset:
            </param>
            <param name="value">
            Value for the reset. Use this form: To delivery settings
            </param>
            <param name="waitingTimeForDisconnect">
            The waiting period (in milliseconds) until the dtm has to be disconnected after a device restart. This can take some time with slower communication protocols. USE 0 IF THE DEVICE WILL NOT RESTART.
            </param>
            <param name="waitingTimeForReconnect">
            The waiting period (in milliseconds) until the dtm has to be reconnected after a device restart. This can take some time with slower communication protocols.
            </param>
            <returns>
            True if reset is finished and Dtm is ready, false if otherwise
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication">
            <summary>
                Description of IApplicationArea.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.CheckForParameterState(System.String,System.String)">
            <summary>
            Method to check a parameters state
            </summary>
            <param name="parameterName">
            Parameter Name
            </param>
            <param name="expectedState">
            Expected State
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.CheckForParameterValue(System.String,System.String)">
            <summary>
            Method to check a parameters value
            </summary>
            <param name="parameterName">
            Parameter Name
            </param>
            <param name="expectedValue">
            Expected Value
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetList(System.String)">
            <summary>
            Clicks text field from a parameter and stores all combo box values in an string array
            </summary>
            <param name="parameterName">
            Parameter for which combo box values will be stored
            </param>
            <returns>
            <br>String[]: with combo box values if call worked fine</br>
                <br>NULL: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetList(Ranorex.Unknown)">
            <summary>
            The get list.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            The <see cref="T:string[]"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetParameter(System.String)">
            <summary>
            Method to get parameter and it´s data from module Parameterization
            </summary>
            <param name="parameterName">
            Parameter to get
            </param>
            <returns>
            <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetParameterStateFast(System.String)">
            <summary>
            GetParameterStateFast returns a information-set of a specified parameter
            </summary>
            <param name="parameterName">
            Name of parameter
            </param>
            <returns>
            Parameter-object containing the state of the parameter
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.IsParameterReadOnly(System.String)">
            <summary>
            Determines whether a parameter is read only.
            </summary>
            <param name="parameterName">
            Name (label) of the parameter.
            </param>
            <returns>
            <c>true</c> if the parameter is read only; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.SetParameterValue(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Method to set a parameter´s value
            </summary>
            <param name="parameterName">
            Parameter to set
            </param>
            <param name="inputValue">
            Value to set
            </param>
            <param name="confirm">
            Determines whether to confirm the changed values
            </param>
            <param name="parameterIndex">
            The parameter Index.
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.SetParameterValue(Ranorex.Unknown,System.String,System.Boolean)">
            <summary>
            The set parameter value.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="pathToParameter">
            The path to parameter.
            </param>
            <param name="confirm">
            The confirm.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetScrollbarHeight">
            <summary>
            Gets the height of the scrollbar.
            </summary>
            <returns>Height of the scrollbar.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetScrollbarYPosition">
            <summary>
            Gets the y position of the scrollbar.
            </summary>
            <returns>Height of the scrollbar.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IApplication.GetPageHeight">
            <summary>
            Gets the height of the page.
            </summary>
            <returns>Height of the page.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckHeaderParameterState">
            <summary>
                Provides interfaces for CheckHeaderParameterState
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckHeaderParameterState.Run(System.String,System.String)">
            <summary>
                Interface for function Run
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="expectedState">Expected state</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckParameterState">
            <summary>
                Provides interfaces for CheckParameterState
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckParameterState.Run(System.String,System.String)">
            <summary>
                Interface for function Run
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="expectedState">Expected state</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckParameterValue">
            <summary>
                Provides interfaces for CheckParameterValue
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICheckParameterValue.Run(System.String,System.String)">
            <summary>
                Interface for function Run
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="expectedValue">Expected value</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IClickButton">
            <summary>
            Interface IClickButton
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IClickButton.Run(System.String)">
            <summary>
             Clicks a specified button
            </summary>
            <param name="buttonId">The button identifier.</param>
            <returns><c>true</c> if button clicked, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOffline">
            <summary>
                Provides methods for function ICloseModuleOffline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOffline.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOffline.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOnline">
            <summary>
                Provides methods for function ICloseModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOnline.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICloseModuleOnline.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICompareDescriptionWithExpectedText">
            <summary>
            Interface ICompareDescriptionWithExpectedText
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICompareDescriptionWithExpectedText.Run(System.String,System.String)">
            <summary>
            Compares the help text of a specified parameter with an expected text.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <param name="expectedText">The expected text.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICompareStateOfStatusIcon.Run(System.String,System.String)">
            <summary>
            Compares the current state of header status icon with expected value
            </summary>
            <param name="statusIconId">The status icon identifier.</param>
            <param name="expectedValue">The reference value.</param>
            <returns><c>true</c> if states are the same, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IConnectToSoftwareUnderTest">
            <summary>
            Interface IConnectToSoftwareUnderTest
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IConnectToSoftwareUnderTest.Run">
            <summary>
            Connects the testing interface using the config file TestInterface.txt in temp folder. Defaults will be used if file not found
            </summary>
            <returns><c>true</c> if connected, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICreateScreenshot">
            <summary>
            Interface ICreateScreenshot
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ICreateScreenshot.Run">
            <summary>
            Takes a screenshot.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions">
            <summary>
            The DashboardFunctions interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareDashboardValueToHeaderParameter(System.String,System.String,System.Double)">
            <summary>
            Compares a dashboard value to header.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="headerParameterName">
            The name of header parameter to compare.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareDashboardValueToParameter(System.String,System.String,System.Double)">
            <summary>
            Compares a dashboard value to a parameter from the parameterization.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="pathToParameter">
            The name and path of parameter to compare. Like Micropilot 5x//Setup//Device tag:.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareExtendedDashboardExtendedValueToHeaderParameter(System.String,System.String,System.Double)">
            <summary>
            Compares a extended dashboard extended value to header.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="headerParameterName">
            The name of header parameter to compare.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareExtendedDashboardExtendedValueToParameter(System.String,System.String,System.Double)">
            <summary>
            Compares a extended dashboard extended value to parameter of parameterization.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="pathToParameter">
            The path To Parameter.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareExtendedDashboardMainValueToHeaderParameter(System.String,System.String,System.Double)">
            <summary>
            Compares the extended dashboard main value to header.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="headerParameterName">
            The name of header parameter to compare.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.CompareExtendedDashboardMainValueToParameter(System.String,System.String,System.Double)">
            <summary>
            Compares the extended dashboard main value to a parameter.
            </summary>
            <param name="nameOfDashboardValueToCompare">
            The name of dashboard value to compare.
            </param>
            <param name="pathToParameter">
            The name and path of parameter to compare. Like Micropilot 5x//Setup//Device tag:.
            </param>
            <param name="accuracy">
            The maximum allowed difference between the two values.
            </param>
            <returns>
            <c>true</c> if values are equal, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetDashboardValueByName(System.String)">
            <summary>
            Gets the value of a dashboard process variable. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetDashboardValueUnitByName(System.String)">
            <summary>
            Gets the value of a dashboard process variable unit. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetExtendedDashboardExtendedValueByName(System.String)">
            <summary>
            Gets the value of the extended dashboard extended process variable. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetExtendedDashboardExtendedValueUnitByName(System.String)">
            <summary>
            Gets the value of the extended dashboard extended process variable unit. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetExtendedDashboardMainValueByName(System.String)">
            <summary>
            Gets the value of the extended dashboard main process variable. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.GetExtendedDashboardMainValueUnitByName(System.String)">
            <summary>
            Gets the value of the extended dashboard main process variable unit. Use names displayed in the dashboard.
            </summary>
            <param name="name">
            The name.
            </param>
            <returns>
            Current value of process variable.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.IsDashboardAvailable">
            <summary>
            Checks whether the Dashboard is available or not using the the main Dashboard control.
            </summary>
            <returns>
            true: if the module is available
            false: if module is not available
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.OpenDashboard(System.Int32)">
            <summary>
            Opens the dashboard via home button. Verifies whether dashboard is open.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if XXXX, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.ProcessVariable(Ranorex.Core.Element)">
            <summary>
            Returns the process variable of a Dashboard container using its FirstLineText attribute
            </summary>
            <param name="container">
            The container from the Dashboard repository
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.ProcessVariableLabel(Ranorex.Core.Element)">
            <summary>
            Returns the label of the Process Variable of a Dashboard container using its ThirdLineText attribute
            </summary>
            <param name="container">
            The container from the Dashboard repository
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.ProcessVariableUnit(Ranorex.Core.Element)">
            <summary>
            Returns the unit of the Process Variable of a Dashboard container using its SecondLineText attribute
            </summary>
            <param name="container">
            The container from the Dashboard repository
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.SelectTab(System.Int32)">
            <summary>
            Selects the tab within the extended Dashboard control
            </summary>
            <param name="index">
            The tab index which will be selected. Main values = 0 , extended values = 1.
            </param>
            <returns>
            true: if tab selected successfully; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDashboardFunctions.TakeScreenshotsWithinInterval(System.Int32,System.Int32)">
            <summary>
            Takes the screenshots within interval. Please make sure that dashboard is visible.
            </summary>
            <param name="intervalInMilliseconds">
            The interval in milliseconds.
            </param>
            <param name="numberOfScreenshots">
            The number of screenshots.
            </param>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDisconnectSoftwareUnderTest">
            <summary>
            Interface IDisconnectFromHost
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDisconnectSoftwareUnderTest.Run">
            <summary>
            Runs this instance.
            </summary>
            <returns><c>true</c> if disconnected, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDragAndDropParameterIntoHeader">
            <summary>
            Interface IDragAndDropParameterIntoHeader
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IDragAndDropParameterIntoHeader.Run(System.String,System.String,System.String)">
            <summary>
            Runs the specified item identifier.
            </summary>
            <param name="itemId">The item identifier.</param>
            <param name="source">The source.</param>
            <param name="destination">The destination.</param>
            <returns><c>true</c> if executed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions">
            <summary>
            The FF912Functions interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.ClickApplyButton">
            <summary>
            Clicks apply button.
            </summary>
            <returns>
            True: if button was clicked
            False: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.ClickCancelButton">
            <summary>
            Clicks cancel button.
            </summary>
            <returns>
            True: if button was clicked
            False: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.DisableSimulation">
            <summary>
            Disables simulation. You have to be in the tab Simulation to execute this.
            </summary>
            <returns>
            true: if simulation is enabled
            false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.EnableSimulation">
            <summary>
            Enables simulation. You have to be in the tab Simulation to execute this.
            </summary>
            <returns>
            true: if simulation is enabled
            false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetSimulationState(System.String)">
            <summary>
            The set simulation value.
            </summary>
            <param name="state">
            The state.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetSimulationState">
            <summary>
            The get simulation state.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetStandardAreaPriority(System.Int32,System.String)">
            <summary>
            The set standard area priority.
            </summary>
            <param name="columnNumber">
            The column number.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetStandardAreaPriority(EH.PCPS.TestAutomation.Common.Enumerations.FF912DiagnosticCategories)">
            <summary>
            The get standard area priority.
            </summary>
            <param name="diagnosticCategory">
            The diagnostic Categories.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetConfigurableAreaPriority(System.Int32,System.String)">
            <summary>
            The set configurable area priority.
            </summary>
            <param name="columnNumber">
            The column number.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetConfigurableAreaPriority(System.Int32)">
            <summary>
            The get configurable area priority.
            </summary>
            <param name="columnNumber">
            The column number.
            <para>- columnNumber: 0-4</para>
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetStandardAreaDiagnosticEventCheckBoxStatus(System.String,System.Boolean)">
            <summary>
            The set standard area event.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path To Diagnostic Event Check Box. Use this form diagnosticEvent//diagnosticCategory//diagnostic
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="toCheck">
            Target status: true = checked; false = unchecked
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetConfigurableAreaDiagnosticEventCheckBoxStatus(System.String,System.Boolean)">
            <summary>
            The set configurable area event.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path To Diagnostic Event Check Box. Use this form bitNumber//diagnosticCategory//diagnostic
            <para>- bitNumber: 1-15</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="toCheck">
            Target status: true = checked; false = unchecked
            </param>
            <returns>
            The<see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetStatus1AreaDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get status 1 area diagnostic event check box status.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path To Diagnostic Event Check Box. Use this form diagnosticEvent//diagnosticCategory
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetStatus2AreaDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get status 2 area diagnostic event check box status.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path to event check box. Use this form bitNumber//diagnosticCategory
            <para>- bitNumber: 1-15</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetConfigurableAreaDiagnosticEventComboBoxValue(System.String,System.String)">
            <summary>
            The set configurable area diagnostic event combo box.
            </summary>
            <param name="pathToDiagnosticEventComboBox">
            The path To Diagnostic Event Combo Box consists of bitNumber event. Use this form bitNumber
            </param>
            <param name="diagnosticEvent">
            The diagnostic Event.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetConfigurableAreaDiagnosticEventComboBoxValue(System.String)">
            <summary>
            The get configurable area diagnostic event combo box value.
            </summary>
            <param name="bitNumber">
            The bit number.
            <para>- bitNumber: 1-15</para>
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetStandardAreaDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get standard area diagnostic event check box status.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path to diagnostic event Check Box. Use this form diagnosticEvent//diagnosticCategory//diagnostic.
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetConfigurableAreaDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get configurable area event.
            </summary>
            <param name="pathToEventCheckBox">
            The path To Event Check Box. Use this form: bitNumber//diagnosticCategory//diagnostic.
            <para>- bitNumber: 1-15</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.IsFF912ModuleAvailable">
            <summary>
            Checks whether the FF912 Module is available or not using the tab control element
            </summary>
            <returns>
            true: if the module is available
            false: if module is not available
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.OpenFF912Configuration(System.String,System.Int32)">
            <summary>
            Opens the ff912 configuration.
            </summary>
            <param name="pathToConfigurationMenu">
            The path to ff912 configuration menu. E.g. Levelflex//Expert//Communication//Field device diagnostic//Configuration
            </param>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <c>true</c> if menu is opened, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SelectTab(System.Int32)">
            <summary>
            Selects the tab within the FF912 embedded control
            </summary>
            <param name="index">
            The tab index which will be selected. 0 = Standard Area, 1 = Configurable Area, 2 = Status 1, 3 = Status 2, 4 = Simulation
            </param>
            <returns>
            true: if tab selected successfully; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetSimulationAreaDiagnosticEventCheckBoxStatusOfEventName(System.String,System.Boolean)">
            <summary>
            The set simulation area diagnostic event check box status of event name.
            </summary>
            <param name="pathToDiagnosticEventComboBox">
            The path to event check box. Use this form diagnosticEvent//diagnostic
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnostic: Simulation</para>
            </param>
            <param name="toCheck">
            The to check.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.SetSimulationAreaDiagnosticEventCheckBoxStatusOfBitNumber(System.String,System.Boolean)">
            <summary>
            The set simulation area diagnostic event check box status of bit number.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path to diagnostic event check box. Use this form bitNumber//diagnostic
            <para>- bitNumber: 1-15</para>
            <para>- diagnostic: Simulation</para>
            </param>
            <param name="toCheck">
            The to check.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetSimulationAreaStandardDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get simulation area standard diagnostic event check box status.
            </summary>
            <param name="pathToDiagnosticEventCheckBox">
            The path To Diagnostic Event Check Box consists of diagnosticEvent and diagnostic. Use this form: diagnosticEvent//diagnostic.
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnostic: Simulation or Active</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.GetSimulationAreaConfigurableDiagnosticEventCheckBoxStatus(System.String)">
            <summary>
            The get simulation area configurable diagnostic event check box status.
            </summary>
            <param name="pathToEventCheckBox">
            The path To Event Check Box. Use this form: bitNumber//diagnostic.
            <para>- bitNumber: 1-15</para>
            <para>- diagnostic: Simulation or Active</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.CompareFF912ConfiguredValueWithTreeParameter(System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            The compare ff 912 configured value with tree parameter.
            </summary>
            <param name="pathToConfigurableAreaCheckBox">
            The path to configurable area check box. Use this form bitNumber//diagnosticCategory//diagnostic
            <para>- bitNumber: 1-15</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification or Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="pathToSimulationAreaCheckBox">
            The path to simulation area check box. Use this form bitNumber//diagnostic
            <para>- bitNumber: 1-15</para>
            <para>- diagnostic: Active</para>
            </param>
            <param name="expectedDiagnosticEvent">
            The expected diagnostic event.
            </param>
            <param name="expectedCheckBoxStatusOnStandardArea">
            The expected check box status on standard area.
            <para>- checked: true</para>
            <para>- unchecked: false</para>
            </param>
            <param name="pathToParameterInTree">
            The path to parameter in tree. Use this form, a.e. Micropilot//Diagnostics 1:
            </param>
            <param name="expectedParameterValue">
            The expected parameter value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.CompareFF912StandardValueWithNamurStatus(System.String,System.String,System.Boolean,System.String)">
            <summary>
            The compare ff912 standard value with header.
            </summary>
            <param name="pathToStandardAreaCheckBox">
            The path to Standard Area check box. Use this form diagnosticEvent//diagnosticCategory//diagnostic.
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification or Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="pathToSimulationAreaCheckBox">
            The path To Simulation Area Check Box. Use this form diagnosticEvent//diagnostic.
            <para>- diagnosticEvent: Highest or High or Low or Lowest Severity Sensor or Electronic or Configuration or Process (example:  Highest Severity Sensor)</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="expectedCheckBoxStatusOnStandardArea">
            The expected status of checkboxes on standard area. 
            <para>- checked: true</para>
            <para>- unchecked: false</para>
            </param>
            <param name="expectedNamurStatusOnHeader">
            The expected namur status on header. Use this form diagnosticCategory
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IFF912Functions.CompareFF912ConfiguredValueWithNamurStatus(System.String,System.String,System.Boolean,System.String)">
            <summary>
            The compare ff 912 configured value with header.
            </summary>
            <param name="pathToConfigurableAreaCheckBox">
            The path to Standard Area check box. Use this form bitNumber//diagnosticCategory//diagnostic.
            <para>- bitNumber: 1-15</para>
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification or Maintenance Required</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="pathToSimulationAreaCheckBox">
            The path To Simulation Area Check Box. Use this form bitNumber//diagnostic.
            <para>- bitNumber: 1-15</para>
            <para>- diagnostic: Enable or Mask</para>
            </param>
            <param name="expectedCheckBoxStatusOnConfigurationArea">
            The expected status of checkboxes on standard area. 
            <para>- checked: true</para>
            <para>- unchecked: false</para>
            </param>
            <param name="expectedNamurStatusOnHeader">
            The expected namur status on header. Use this form diagnosticCategory
            <para>- diagnosticCategory: Failure, Function Check, Out Of Specification, Maintenance Required</para>
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetComboBoxList">
            <summary>
                Interface of GetComboBoxList.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetComboBoxList.Run(System.String)">
            <summary>
                Searches and selects a specified parameter and stores its combobox values
            </summary>
            <param name="pathToParameter">Like "Export//Diagnostics//Data logging//Assign channel 1 (41):"</param>
            <returns>
                String[] with all combobox items if call worked fine
                null if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetComboBoxList.Run(System.String,System.Boolean)">
            <summary>
                Searches and selects a specified parameter and stores its combobox values
            </summary>
            <param name="pathToParameter">Like "Export//Diagnostics//Data logging//Assign channel 1 (41):"</param>
            <param name="withTreeTracing">Enables / disables tree tracing</param>
            <returns>
                String[] with all combobox items if call worked fine
                null if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetDescriptionText">
            <summary>
            Interface IGetDescriptionText
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetDescriptionText.Run(System.String)">
            <summary>
            Gets the description of a parameter (if available). Empty if not.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetExtendedHeaderParameterLabel.Run(System.String)">
            <summary>
            Gets the label of a header parameter in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetExtendedHeaderParameterUnit.Run(System.String)">
            <summary>
            Gets the value of a header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetExtendedHeaderParameterValue.Run(System.String)">
            <summary>
            Gets the value of an extended header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetHeaderParameter">
            <summary>
                Interface for function Get Header Parameter
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetHeaderParameter.Run(System.String)">
            <summary>
                Start function
            </summary>
            <param name="parameterName">Parameter name</param>
            <returns>
                <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetHeaderParameterLabel.Run(System.String)">
            <summary>
            Gets the label of a header parameter in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetHeaderParameterUnit.Run(System.String)">
            <summary>
            Gets the value of a header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetHeaderParameterValue.Run(System.String)">
            <summary>
            Gets the value of a header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>The parameter value.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetNamurStatusFromHeader">
            <summary>
            The GetNamurStatusFromHeader interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetNamurStatusFromHeader.Run">
            <summary>
            Gets the current Namur-Status from the identification area of the DTM.
            </summary>
            <returns>Current Namur-Status. E.g. 'OK', 'Function check (C)'.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameter">
            <summary>
                Interface for function Get Parameter
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameter.Run(System.String)">
            <summary>
                Start function
            </summary>
            <param name="pathToParameter">Path to parameter within Parameterization</param>
            <returns>
                <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterEnumItems">
            <summary>
            Interface IGetParameterEnumItems
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterEnumItems.Run(System.String)">
            <summary>
            Gets all enums from a parameter in current display content
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>List with all enums of a parameter</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterLabel">
            <summary>
            Interface IGetParameterLabel
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterLabel.Run(System.String)">
            <summary>
            Returns label of specified parameter.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterUnit.Run(System.String)">
            <summary>
            Gets the unit from a parameter in current display content
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>List with all enums of a parameter</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValue">
            <summary>
            Gets the value of a specified parameter
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValue.Run(System.String)">
            <summary>
            Searches for the specified parameter and returns its value
            </summary>
            <param name="pathToParameter">
            The path to the parameter
            </param>
            <returns>
            The value of the parameter
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValueFromHeader">
            <summary>
            The GetParameterValueFromHeader interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValueFromHeader.Run(System.String)">
            <summary>
            Gets the value (as string) from a parameter within the header area.
            </summary>
            <param name="parameterName">
            The parameter name (internal parameter name)
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValueRange">
            <summary>
            Interface IGetParameterValueRange
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValueRange.MaximumRange(System.String)">
            <summary>
            Gets the maximum range from parameter in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetParameterValueRange.MinimumRange(System.String)">
            <summary>
            Gets the minimum range from parameter in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetStatusIconState">
            <summary>
            Interface IGetStatusIconState
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IGetStatusIconState.Run(System.String)">
            <summary>
            Gets the current state from the status icon within the device header
            </summary>
            <param name="statusIconId">The status icon identifier.</param>
            <returns>Current state</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IIdentification">
            <summary>
                Interface for area Identification Area
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IIdentification.GetHeaderParameter(System.String)">
            <summary>
                Get a single header parameter
            </summary>
            <param name="parameterName">Parameter to get</param>
            <returns>
                <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IIdentification.GetHeaderParameters">
            <summary>
                Get list of header parameters
            </summary>
            <returns>
                <br>List of parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IIdentification.CheckParameterForState(System.String,System.String)">
            <summary>
                Check parameter for state
            </summary>
            <param name="parameterName">Parameter name</param>
            <param name="expectedState">Expected state</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation">
            <summary>
                Interface for area Navigation Area.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation.ExpandMenu(Ranorex.TreeItem)">
            <summary>
                Expand tree item
            </summary>
            <param name="tiTreeitem">Tree item to expand</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation.CollapseMenu(Ranorex.TreeItem)">
            <summary>
                Collaps tree item
            </summary>
            <param name="tiTreeitem">Tree item to collaps</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation.NumberOfColums(System.String,System.Int32)">
            <summary>
                Check number of expected columns
            </summary>
            <param name="containerPath">Path to control</param>
            <param name="expectedColumns">Number of expected column</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation.SearchAndSelectParameter(System.String)">
            <summary>
                Search and select specified parameter
            </summary>
            <param name="path">Path to parameter within the parameter tree</param>
            <returns>
                <br>Accessible Name of selected tree item or string.Empty</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INavigation.CheckForTabPageTitle(System.String)">
            <summary>
                Check for tab page title
            </summary>
            <param name="tabPageTitle">Expected tab page title</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions">
            <summary>
            The NE107Functions interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.ClickApplyButton">
            <summary>
            Clicks apply button.
            </summary>
            <returns>
            True: if button was clicked
            False: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.ClickCancelButton">
            <summary>
            Clicks cancel button.
            </summary>
            <returns>
            True: if button was clicked
            False: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.IsNE107ModuleAvailable">
            <summary>
            Checks whether the NE107 Module is available or not using the tab control element
            </summary>
            <returns>
            true: if the module is available
            false: if module is not available
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.OpenNe107Configuration(System.String,System.Int32)">
            <summary>
            Opens the ne107 configuration.
            </summary>
            <param name="pathToConfigurationMenu">
            The path to Ne107 configuration menu. E.g. Prowirl 200//Expert//Communication//Diagnostic configuration
            </param>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <c>true</c> if menu is opened, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.SetSimulationAreaDiagnosticEventSimulation(System.String)">
            <summary>
            The select simulation diagnostic event.
            </summary>
            <param name="value">
            Simulation event which will be selected
            </param>
            <returns>
            True: if call successful, false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.SelectTab(System.Int32)">
            <summary>
            Selects the tab within the NE107 embedded control
            </summary>
            <param name="index">
            The tab index which will be selected.CodeWrights started index at 1, so 1 = Electronics, 2 = Process, 3 = Configuration, 4 = Simulation
            </param>
            <returns>
            true: if tab selected successfully; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.CompareNE107SimulationWithNamurStatus(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
            The compare n e 107 simulation with namur status.
            </summary>
            <param name="tab">
            The tab.
            </param>
            <param name="diagnosticEvent">
            The diagnostic event.
            </param>
            <param name="expectedCategory">
            The expected category.
            </param>
            <param name="expectedSimulatedEvent">
            The expected simulated event.
            </param>
            <param name="expectedNamurState">
            The expected namur state.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.CompareNE107SimulationWithTreeParameter(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            The compare n e 107 simulation with tree parameter.
            </summary>
            <param name="tab">
            The tab.
            </param>
            <param name="diagnosticEvent">
            The diagnostic event.
            </param>
            <param name="expectedCategory">
            The expected category.
            </param>
            <param name="expectedSimulatedEvent">
            The expected simulated event.
            </param>
            <param name="pathToParameterInTree">
            The path to parameter in tree.
            </param>
            <param name="expectedParameterValue">
            The expected parameter value.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.GetActiveDiagnosticEventCategory(System.String)">
            <summary>
            The get active diagnostic event category.
            </summary>
            <param name="diagnosticEvent">
            The diagnostic event.
            </param>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.GetSimulationAreaDiagnosticEventSimulation">
            <summary>
            The get simulation area diagnostic event simulation.
            </summary>
            <returns>
            The <see cref="T:System.String"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.INE107Functions.SetActiveDiagnosticEventCategory(System.String)">
            <summary>
            The set active diagnostic event category.
            </summary>
            <param name="pathToDiagnosticEventRadioButton">
            The path to diagnostic event radio button.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IOpenModuleOffline">
            <summary>
                Provides methods for function IOpenModuleOffline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IOpenModuleOffline.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IOpenModuleOnline">
            <summary>
                Provides methods for function IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IOpenModuleOnline.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISelectMenuItem.Run(System.String)">
            <summary>
            Selects a menu 
            </summary>
            <param name="menuId">The menu identifier.</param>
            <returns><c>true</c> if menu opened, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISelectParameter">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISelectParameter.Run(System.String)">
            <summary>
            
            </summary>
            <param name="pathToParameter"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISelectParameterAbsolute.Run(System.String)">
            <summary>
            Selects a parameter with an absolute path
            </summary>
            <param name="pathToParameter">The path to parameter.</param>
            <returns><c>true</c> if selected, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISelectParameterRelative.Run(System.String)">
            <summary>
            Selects parameter with relative path
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if selected, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISetParameter">
            <summary>
                Interface for function Set Parameter
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISetParameter.Run(System.String,System.String)">
            <summary>
                Set a specified parameter
            </summary>
            <param name="pathToParameter">Path to parameter including parameter name</param>
            <param name="inputValue">New value</param>
            <returns>
                <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISetParameter.Run(System.String,System.String,System.Boolean)">
            <summary>
            Set a specified parameter
            </summary>
            <param name="pathToParameter">Path to parameter including parameter name</param>
            <param name="inputValue">New value</param>
            <param name="confirmChange">Determines whether to confirm the changed value</param>
            <returns><br>Parameter: if call worked fine</br>
            <br>Null: if an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISetParameter.Run(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Set a specified parameter
            </summary>
            <param name="pathToParameter">
            Path to parameter including parameter name
            </param>
            <param name="inputValue">
            New value
            </param>
            <param name="withTreeTracing">
            Enables / disables tree tracing
            </param>
            <param name="confirmChange">
            Determines whether to confirm the changed value
            </param>
            <returns>
            <br>Parameter: if call worked fine</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.OnlineParameterization">
            <summary>
            Takes a screenshot of the Online Parameterization
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.OfflineParameterization">
            <summary>
            Takes a screenshot of the Offline Parameterization
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions">
            <summary>
            Interface ISilWhgFunctions
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.Cancel">
            <summary>
                Click Cancel in Navigation Menu
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.Confirm">
            <summary>
                Click Confirm in Navigation Menu
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.GetSilWhgParameter(System.String)">
            <summary>
            Gets a SIL WHG parameter from the SIL WHG wizard.
            </summary>
            <param name="parameterName">
            Name of the parameter. E.g. Commissioning: , Set write protection: , Value of simulated distance: etc....
            </param>
            <returns>
            The value of the parameter.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.NavigateToSilWhgWizard(System.String)">
            <summary>
            Navigates through the parameter tree to the SIL/WHG wizard.
            </summary>
            <param name="parameterName">
            Name of the SIL/WHG parameter shown in the parameter tree. For example: Levelflex FMP5x//Setup//Advanced setup//SIL/WHG confirmation OR Levelflex FMP5x//Setup//Advanced setup//Deactivate SIL/WHG
            </param>
            <returns>
            <c>true</c> if SIL/WHG parameter is found and selected, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.Next">
            <summary>
                Click Next in Navigation Menu
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.Previous">
            <summary>
                Click Previous in Navigation Menu
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.ISilWhgFunctions.SetSilWhgParameter(System.String,System.String)">
            <summary>
            Changes a parameter within the SIL/WHG wizard.NOTE: THE PARAMETER MUST BE VISIBLE!
            </summary>
            <param name="parameterName">
            Name of the parameter. E.g. Commissioning: , Set write protection: , Value of simulated distance: etc...
            </param>
            <param name="parameterValue">
            The parameter value.E.g. Expert mode
            </param>
            <returns>
            <c>true</c> if parameter changed, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions">
            <summary>
            The WizardFunctions interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.AdditionalSettings">
            <summary>
                Click Additional Settings in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.Cancel">
            <summary>
                Click Cancel in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.Confirm">
            <summary>
                Click Confirm in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.EndOfSequence">
            <summary>
                Click End Of Sequence in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.GetWizardParameterValue(System.String)">
            <summary>
            Gets a parameter from a wizard.
            </summary>
            <param name="parameterName">
            Name of the parameter. E.g. Commissioning: , Set write protection: , Value of simulated distance: etc....
            </param>
            <returns>
            The value of the parameter.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.NavigateToWizard(System.String)">
            <summary>
            Navigates to a wizard.
            </summary>
            <param name="parameterName">
            Name of the wizard parameter shown in the parameter tree. For example: Micropilot 5x//Commissioning
            </param>
            <returns>
            <c>true</c> if wizard parameter is found and selected, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.Next">
            <summary>
                Click Next in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.OpenCreateDocumentation">
            <summary>
            Opens the create documentation.
            </summary>
            <returns><c>true</c> if module open and ready, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.OpenEnvelopeCurve">
            <summary>
            Opens the envelope curve.
            </summary>
            <returns><c>true</c> if module is open and ready, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.OpenSaveRestore">
            <summary>
            Opens the Open Save Restore.
            </summary>
            <returns><c>true</c> if module is open and ready, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.Previous">
            <summary>
                Click Previous in Navigation Menu of the wizard.
            </summary>
            <returns>
                <br>Button: If call worked fine</br>
                <br>NULL: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Execution.IWizardFunctions.SetWizardParameterValue(System.String,System.String)">
            <summary>
            Changes a parameter within a wizard. NOTE: THE PARAMETER MUST BE VISIBLE!
            </summary>
            <param name="parameterName">
            Name of the parameter. E.g. Commissioning: , Set write protection: , Value of simulated distance: etc...
            </param>
            <param name="parameterValue">
            The parameter value.E.g. Expert mode
            </param>
            <returns>
            <c>true</c> if parameter changed, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IAreas">
            <summary>
                Interface for Areas
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IAreas.AreAreasAvailable">
            <summary>
                Check if main dtm areas are available
            </summary>
            <returns>
                <br>True: if areas are available</br>
                <br>False: if if areas are not available</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IAreas.IsIdentificationAreaAvailable">
            <summary>
                Check if identifikation area is available
            </summary>
            <returns>
                <br>True: if identification area is available</br>
                <br>False: if identification area is not available</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IAreas.IsApplicationAreaAvailable">
            <summary>
                Check if display area is available
            </summary>
            <returns>
                <br>True: if application area is available</br>
                <br>False: if application area is not available</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IAreas.IsNavigationAreaAvailable">
            <summary>
                Check if navigation area is available
            </summary>
            <returns>
                <br>True: if navigation area is available</br>
                <br>False: if navigation area is not available</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsBreadcrumbAvailable.Run(System.String)">
            <summary>
            Determines whether a specific bread crumb is available in current display content        
            </summary>
            <param name="breadcrumbId">The bread crumb identifier.</param>
            <returns><c>true</c> if bread crumb is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsBreadcrumbAvailable.Run">
            <summary>
            Determines whether a bread crumb exists in current display content
            </summary>
            <returns><c>true</c> if bread crumb exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsBreadcrumbVisible.Run(System.String)">
            <summary>
            Determines whether a bread crumb exists in current display content
            </summary>
            <returns><c>true</c> if bread crumb exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsButtonAvailable.Run(System.String)">
            <summary>
            Validates, whether a specified button exists in current display content.
            </summary>        
            <param name="buttonId">The parameter identifier.</param>
            <returns><c>true</c> if button is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsButtonVisible.Run(System.String)">
            <summary>
            Validates, whether a specified parameter is visible in current display content.
            </summary>        
            <param name="buttonId">The parameter identifier.</param>
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsExtendedHeaderAvailable.Run">
            <summary>
            Validates, whether extended device header exists in current display content.
            </summary>                
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsExtendedHeaderParameterAvailable">
            <summary>
            Interface IIsExtendedHeaderParameterAvailable
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsExtendedHeaderParameterAvailable.Run(System.String)">
            <summary>
            Determines whether an extended header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsExtendedHeaderVisible.Run">
            <summary>
            Validates, whether extended device header is visible in current display content.
            </summary>                
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsHeaderAvailable.Run">
            <summary>
            Validates, whether device header exists in current display content.
            </summary>                
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsHeaderParameterAvailable.Run(System.String)">
            <summary>
            Determines whether a header parameter exists in current display content.
            </summary>
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter exists, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsHeaderVisible.Run">
            <summary>
            Validates, whether device header is visible in current display content.
            </summary>                
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsMenuItemAvailable.Run(System.String)">
            <summary>
            Validates, whether a specified menu item exists in current display content.
            </summary>        
            <param name="menuItemId">The menu item identifier.</param>
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsMenuItemDynamic.Run(System.String)">
            <summary>
            Determines whether a menu item is dynamic
            </summary>
            <param name="menuItemId">The menu item identifier.</param>
            <returns><c>true</c> if menu item is dynamic, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsMenuItemPrintable.Run(System.String)">
            <summary>
            Determines whether a menu item is printable
            </summary>
            <param name="menuItemId">The menu item identifier.</param>
            <returns><c>true</c> if menu item is printable, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsMenuItemVisible.Run(System.String)">
            <summary>
            Runs the specified menu item identifier.
            </summary>
            <param name="menuItemId">The menu item identifier.</param>
            <returns><c>true</c> if menu item is visible, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleOffline.Run">
            <summary>
            Determines whether module is offline
            </summary>
            <returns><c>true</c> if offline, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleOnline.Run">
            <summary>
            Determines whether module is online
            </summary>
            <returns><c>true</c> if online, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="adapter">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterAvailable.Run(System.String)">
            <summary>
            Validates, whether a specified parameter exists in current display content.
            </summary>        
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterDescriptionAvailable.Run(System.String)">
            <summary>
            Checks whether a help text for a parameter is available in current display content.
            </summary>
            <param name="parameterId">The parameter id.</param>
            <returns><c>true</c> if help available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterDynamic.Run(System.String)">
            <summary>
            Validates, whether a specified parameter is dynamic in current display content.
            </summary>        
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter is dynamic, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterExisting">
            <summary>
            The IsParameterExisting interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterExisting.Run(System.String)">
            <summary>
            Searches for the specified parameter reports whether it is existing
            </summary>
            <param name="pathToParameter">
            The path to the parameter
            </param>
            <returns>
            True if the parameter exists, false otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterPrintable.Run(System.String)">
            <summary>
            Validates, whether a specified parameter is printable in current display content.
            </summary>        
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter is printable, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterReadOnly">
            <summary>
            The IsParameterReadOnly interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterReadOnly.Run(System.String)">
            <summary>
            Determines whether a specified parameter is read only.
            </summary>
            <param name="pathToParameter">
            The parameter name and path. E.g. 'Micropilot 5x//Setup//Full calibration (4):'.
            </param>
            <returns>
            <c>true</c> if the parameter is read only, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsParameterVisible.Run(System.String)">
            <summary>
            Validates, whether a specified parameter is visible in current display content.
            </summary>        
            <param name="parameterId">The parameter identifier.</param>
            <returns><c>true</c> if parameter is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsPictureAvailable.ViaParameterId(System.String)">
            <summary>
            Checks whether a picture is displayed (on help page) for a parameter in current display content.
            </summary>
            <param name="parameterId">The parameter id.</param>
            <returns><c>true</c> if picture available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsPictureAvailable.ViaPictureId(System.String)">
            <summary>
            Checks whether a picture is displayed (on help page) for a parameter in current display content.
            </summary>
            <param name="pictureId">The picture id.</param>
            <returns><c>true</c> if picture available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsPictureVisible.Run(System.String)">
            <summary>
            Checks whether a picture is visible (on help page) for a parameter in current display content.
            </summary>
            <param name="parameterId">The parameter id.</param>
            <returns><c>true</c> if picture available, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsStateOfStatusIconChanged">
            <summary>
            Interface IIsStateOfStatusIconChanged
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsStateOfStatusIconChanged.Run(System.String,System.String)">
            <summary>
            Validates whether status has changed.
            </summary>
            <param name="statusIconId">The status icon identifier.</param>
            <param name="oldState">The old state.</param>
            <returns><c>true</c> if changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsWizardActive.Run">
            <summary>
            Determines whether a wizard sequence is active. (Are wizard navigation buttons on screen?)
            </summary>        
            <returns><c>true</c> if wizard sequence is active, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsWizardButtonAvailable.Run(System.String)">
            <summary>
            Determines whether a specific wizard button (next, previous, cancel) is available in current display content
            </summary>
            <param name="buttonId">The button identifier.</param>
            <returns><c>true</c> if button is available, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsWizardButtonClickable.Run(System.String)">
            <summary>
            
            </summary>
            <param name="buttonId"></param>
            <returns></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IIsWizardFinished.Run">
            <summary>
            Determines whether a wizard sequence is finished.
            </summary>        
            <returns><c>true</c> if wizard sequence is finished, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOnlineModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOnlineModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOnlineModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilOnlineModuleIsClosed(System.Int32)">
            <summary>
            Wait until module is closed.
            </summary>
            <param name="timeOutInMilliseconds">
            The time Out In Milliseconds.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilOnlineModuleIsOpen(System.Int32)">
            <summary>
            The wait until module is open.
            </summary>
            <param name="timeOutInMilliseconds">
            The time out in milliseconds.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOfflineModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOfflineModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsOfflineModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilOfflineModuleIsClosed(System.Int32)">
            <summary>
            Wait until module is closed.
            </summary>
            <param name="timeOutInMilliseconds">
            The time Out In Milliseconds.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilOfflineModuleIsOpen(System.Int32)">
            <summary>
            The wait until module is open.
            </summary>
            <param name="timeOutInMilliseconds">
            The time out in milliseconds.
            </param>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg">
            <summary>
            The SILWHG interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsCancelButtonActive">
            <summary>
            Determines whether the cancel button is active.
            </summary>
            <returns><c>true</c> if cancel button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsConfirmButtonActive">
            <summary>
            Determines whether the confirm button is active.
            </summary>
            <returns><c>true</c> if confirm button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsNavigationTreeShown">
            <summary>
            Determines whether the Navigation parameter tree is shown.
            </summary>
            <returns><c>true</c> if Navigation parameter tree is shown; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsNextButtonActive">
            <summary>
            Determines whether the next button is active.
            </summary>
            <returns><c>true</c> if Next button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsPreviousButtonActive">
            <summary>
            Determines whether the previous button is active.
            </summary>
            <returns><c>true</c> if previous button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsResetSilSequenceStartPageShown">
            <summary>
            Determines whether the reset SIL sequence start page is shown.
            </summary>
            <returns><c>true</c> if  reset SIL sequence start page is shown; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.IsSilSequenceStartPageShown">
            <summary>
            Determines whether the SIL sequence start page is shown.
            </summary>
            <returns><c>true</c> if SIL sequence start page is shown; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilCancelButtonIsActive(System.Int32)">
            <summary>
            Waits until cancel button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if cancel button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilCancelingIsFinished(System.Int32)">
            <summary>
            Waits until the canceling progress is finished.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> If canceling is finished and the parameter tree is visible again, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilConfirmButtonIsActive(System.Int32)">
            <summary>
            Waits until confirm button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if confirm button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilNextButtonIsActive(System.Int32)">
            <summary>
            Waits until next button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if next button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilPreviousButtonIsActive(System.Int32)">
            <summary>
            Waits until previous button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if previous button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilSilSequenceStartPageIsDisappeared(System.Int32)">
            <summary>
            Waits the until SIL WHG sequence start page is disappeared.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if the page disappears in time, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilSilSequenceStartPageIsShown(System.Int32)">
            <summary>
            Waits the until SIL WHG sequence start page is shown.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if the page is shown in time, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilResetSilSequenceStartPageIsDisappeared(System.Int32)">
            <summary>
            Waits the until SIL WHG sequence start page is disappeared.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if the page disappears in time, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.ISilWhg.WaitUntilResetSilSequenceStartPageIsShown(System.Int32)">
            <summary>
            Waits the until  reset SIL WHG sequence start page is shown.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if the page is shown in time, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChanged">
            <summary>
            Interface IWaitForDisplayContentChanged
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChanged.Run(System.String,System.Int32)">
            <summary>
            Waits for a changed display content
            </summary>
            <param name="oldDisplayContent">Old display content.</param>
            <param name="timeoutInMilliseconds">The timeout in milliseconds.</param>
            <returns><c>true</c> if changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChangedAfterSelect">
            <summary>
            Interface IWaitForDisplayContentChangedAfterSelect
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChangedAfterSelect.Run(System.Int32,System.String)">
            <summary>
            Waits for display content change after selecting an item
            </summary>
            <param name="timeoutInMilliseconds">The timeout in milliseconds.</param>
            <param name="nodePath">The node path.</param>
            <returns><c>true</c> if content changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChangedAfterSet">
            <summary>
            Interface IWaitForDisplayContentChangedAfterSet
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitForDisplayContentChangedAfterSet.Run(System.Int32,System.String,System.String)">
            <summary>
            Waits for display content change after changing a parameter
            </summary>
            <param name="timeoutInMilliseconds">The timeout in milliseconds.</param>
            <param name="nodePath">The node path.</param>
            <param name="value"></param>
            <returns><c>true</c> if content changed, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard">
            <summary>
            The Wizard interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsAdditionalSettingsButtonActive">
            <summary>
            Determines whether the additional settings button is active.
            </summary>
            <returns><c>true</c> if cancel button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsCancelButtonActive">
            <summary>
            Determines whether the cancel button is active.
            </summary>
            <returns><c>true</c> if cancel button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsConfirmButtonActive">
            <summary>
            Determines whether the confirm button is active.
            </summary>
            <returns><c>true</c> if confirm button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsEndOfSequenceButtonActive">
            <summary>
            Determines whether the end of sequence button is active.
            </summary>
            <returns><c>true</c> if cancel button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsNavigationTreeShown">
            <summary>
            Determines whether the Navigation parameter tree is shown.
            </summary>
            <returns><c>true</c> if Navigation parameter tree is shown; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsNextButtonActive">
            <summary>
            Determines whether the next button is active.
            </summary>
            <returns><c>true</c> if Next button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.IsPreviousButtonActive">
            <summary>
            Determines whether the previous button is active.
            </summary>
            <returns><c>true</c> if previous button is active; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilAdditionalSettingsButtonIsActive(System.Int32)">
            <summary>
            Waits until additional settings button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if additional settings button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilCancelButtonIsActive(System.Int32)">
            <summary>
            Waits until cancel button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if cancel button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilCancelingIsFinished(System.Int32)">
            <summary>
            Waits until the canceling progress is finished.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> If canceling is finished and the parameter tree is visible again, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilConfirmButtonIsActive(System.Int32)">
            <summary>
            Waits until confirm button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if confirm button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilEndOfSequenceButtonIsActive(System.Int32)">
            <summary>
            Waits until end of sequence button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if end of sequence button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilNextButtonIsActive(System.Int32)">
            <summary>
            Waits until next button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if next button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.ApplicationArea.MainView.Validation.IWizard.WaitUntilPreviousButtonIsActive(System.Int32)">
            <summary>
            Waits until previous button is active.
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout in milliseconds.
            </param>
            <returns>
            <c>true</c> if previous button is active, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.MenuArea.Toolbar.Execution.IGoToHomeLocation">
            <summary>
            The GoToHomeLocation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.MenuArea.Toolbar.Execution.IGoToHomeLocation.Run">
            <summary>
            Clicks the go to home location button.
            </summary>
            <returns><c>true</c> if button clicked, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
            validation method
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
                validation method
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
                provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
                validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
                Provides validation methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Parameterization.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
                validation method
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ICloseModule">
            <summary>
                Provides methods for flow ICloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ICloseModule.Run">
            <summary>
                Methods to close module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ILoadFile">
            <summary>
                Interface for flow Load File
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ILoadFile.Run(System.String)">
            <summary>
                Start flow
            </summary>
            <param name="fileName">File to load</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOnline">
            <summary>
                Provides methods for flow IOpenModuleOnline.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOnline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestore">
            <summary>
                Description of IRestore.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestore.Run(System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Runs Restore with or without an download, depending on set parameters
            </summary>
            <param name="fileName">
            Filename of file to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            Boolean for waiting or not, until process is finished
            </param>
            <param name="timeOutInMilliseconds">
            Time until action must be done
            </param>
            <param name="restore">
            Boolean to restore or not
            </param>
            <param name="download">
            Boolean to download or not
            </param>
            <param name="identical">
            Boolean to download to identical device or not
            </param>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreInvalidFile">
            <summary>
            The RestoreInvalidFile interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreInvalidFile.Run(System.String,System.Boolean)">
            <summary>
            Tries to restore an invalid file and validates whether the modules behavior is correct and its not possible to restore.
            </summary>
            <param name="fileName">
            Filename of an invalid file to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithDownload">
            <summary>
                Interface for flow Restore With Download
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithDownload.Run">
            <summary>
            Performs a restore with download. File is loaded from a default file path in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithDownload.Run(System.String,System.Boolean)">
            <summary>
            Start flow with default behavior
            </summary>
            <param name="fileName">
            File to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithDownload.Run(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Start flow with specific behavior
            </summary>
            <param name="fileName">
            File to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            Waits until process is finished if true
            </param>
            <param name="timeOutInMilliseconds">
            Time until action must be finished
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithoutDownload">
            <summary>
                Interface for flow Restore Without Download
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithoutDownload.Run">
            <summary>
            Performs a restore without download. File is loaded from a default file path in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithoutDownload.Run(System.String,System.Boolean)">
            <summary>
            Start flow with default behavior
            </summary>
            <param name="fileName">
            File to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.IRestoreWithoutDownload.Run(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Start flow with specific behavior
            </summary>
            <param name="fileName">
            File to restore
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            Determines whether to wait for the action or not
            </param>
            <param name="timeOutInMilliseconds">
            Time until action must be finished
            </param>
            <returns>
            <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISave">
            <summary>
            The Save interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISave.Run(System.String,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Runs Save with or without an upload, depending on set parameters
            </summary>
            <param name="fileName">
            Filename to save file as
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            Boolean for waiting or not, until process is finished
            </param>
            <param name="timeOutInMilliseconds">
            Time until action must be done
            </param>
            <param name="save">
            Boolean to save or not
            </param>
            <param name="upload">
            Boolean to upload or not
            </param>
            <returns>
            <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveFile">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveFile.Run(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithoutUpload">
            <summary>
            Interface ISaveWithoutUpload
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithoutUpload.Run">
            <summary>
            Performs a save without download. File is saved to a default file path in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithoutUpload.Run(System.String,System.Boolean)">
            <summary>
            Flow: Perform a save without upload. No file dialog is used.
            A default filename is used.
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <returns>
            <br>True: If call worked fine</br>
            <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithUpload">
            <summary>
            Interface ISaveWithUpload
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithUpload.Run">
            <summary>
            Performs a save with upload. File is saved with a default file name in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithUpload.Run(System.String,System.Boolean)">
            <summary>
            Flow: Perform a save with upload. No file dialog is used.A default filename is used.
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <returns>
            <br>True: If call worked fine</br>
            <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithUpload.Run(System.String,System.Boolean,System.Boolean)">
            <summary>
            Flow: Perform a save with upload. No file dialog is used.
            A default filename is used.
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            if set to <c>true</c> [wait until finished].
            </param>
            <returns>
            <br>True: If call worked fine</br>
            <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISaveWithUpload.Run(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Flow: Perform a save with upload. File dialog is called
            if Filename is not an empty String.
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
            <param name="defaultPath">
            If true, "Program Data" path is used as file location. Else a valid file location path must be provided
            </param>
            <param name="waitUntilFinished">
            if set to <c>true</c> [wait until finished].
            </param>
            <param name="timeOutInMilliseconds">
            The time out in milliseconds.
            </param>
            <returns>
            <br>True: If call worked fine</br>
            <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISetDataSet">
            <summary>
                Interface for function Set Data Set
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Flows.ISetDataSet.Run(System.String)">
            <summary>
                Start flow
            </summary>
            <param name="datasetLabel">Dataset label</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Provides methods for flow ICloseModules.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation">
            <summary>
            The Navigation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Back">
            <summary>
                Clicks button Back
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Finish">
            <summary>
            Clicks button Finish
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Next">
            <summary>
            Clicks button Next
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Restore">
            <summary>
                Clicks button Restore
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Save">
            <summary>
                Clicks button Save
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.INavigation.Start">
            <summary>
                Clicks button Start
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Provides methods for flow IOpenModule.cs
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Methods to Open module
            </summary>
            <param name="moduleToOpen">Module name</param>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection">
            <summary>
            The Selection interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.GetProgressInformation">
            <summary>
                Get progress Information
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.GetStateInformation">
            <summary>
                Get State Information
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.GetSummaryInformation">
            <summary>
            Get summary Information
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.Load">
            <summary>
                Save file with default name
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.Save">
            <summary>
                Save file with default name
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectDifferent">
            <summary>
            Select option for Different Device
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectDownload">
            <summary>
                Clicks checkbox Download
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectDownloadModeAllParameters">
            <summary>
            Selects the download mode all parameters.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectDownloadModeDuplicate">
            <summary>
            Selects the download mode duplicate.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectIdentical">
            <summary>
            Select option for Identical Device
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectRestore">
            <summary>
            Clicks checkbox Restore
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectSave">
            <summary>
            Clicks checkbox Save
            </summary>
            <returns><br>True: If call worked fine</br>
            <br>False: If an error occurred</br></returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ISelection.SelectUpload">
            <summary>
                Clicks checkbox Upload
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckDeviceStatus">
            <summary>
            The CheckDeviceStatus interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckDeviceStatus.GetCurrentStatus">
            <summary>
            Gets the current device status as shown in the Save/Restore module
            </summary>
            <returns>
            The current status
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckDeviceStatus.WasUploadSuccessful">
            <summary>
            Evaluates whether uploading was successful
            </summary>
            <returns><c>true</c> if 'Download succeeded' message is shown in the 'Status of Save/Restore Assistant' box, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckDeviceStatus.WasDownloadSuccessful">
            <summary>
            Evaluates whether downloading was successful
            </summary>
            <returns><c>true</c> if 'Download succeeded' message is shown in the 'Status of Save/Restore Assistant' box, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckSaveRestoreStatus">
            <summary>
            The CheckSaveRestoreStatus interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckSaveRestoreStatus.GetCurrentStatus">
            <summary>
            Gets the current status of the Save/Restore module
            </summary>
            <returns>
            The current status
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckSaveRestoreStatus.WasSavingSuccessful">
            <summary>
            Evaluates whether saving was successful
            </summary>
            <returns><c>true</c> if 'Saving finished successfully' message is shown in the 'Status of Save/Restore Assistant' box, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.ICheckSaveRestoreStatus.WasRestoringSuccessful">
            <summary>
            Evaluates whether restoring was successful
            </summary>
            <returns><c>true</c> if 'Restoring finished successfully' message is shown in the 'Status of Save/Restore Assistant' box, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="adapter">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsProcessActive">
            <summary>
                Description of IsProcessActive.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IIsProcessActive.Run">
            <summary>
                Checks if SaveRestore is active
            </summary>
            <returns>
                <br>True: if process is active</br>
                <br>False: if process is not active</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleName">
            <summary>
                Description of IModuleName.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleName.moduleName">
            <summary>
                Returns name of actual module
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilProcessFinished">
            <summary>
                Description of WaitUntilProcessFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.ApplicationArea.MainView.Validation.IWaitUntilProcessFinished.Run(System.Int32)">
            <summary>
                Waits until Save / Retore is finished, by watching the progressbar
                Waiting is non-optional and will raile exceptions, if nothing is found.
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if process finished in time</br>
                <br>False: if process not finished in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.MenuArea.Toolbar.Execution.ISetFocusOnDataSet">
            <summary>
                Description of ISetFocusOnDataSet.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.MenuArea.Toolbar.Execution.ISetFocusOnDataSet.Run">
            <summary>
                Set focus on combobox DataSet
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IIsDTMConnected.Run">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IIsDTMDisconnected.Run">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsConnected.Run(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.SaveRestore.Functions.StatusArea.Statusbar.Validation.IWaitUntilDTMIsDisconnected.Run(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeOutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICalculate">
            <summary>
                Description of ICalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICalculate.Run">
            <summary>
                Starts calculation via icon, waits until calculation is finished
            </summary>
            <returns></returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICheckResultsAfterCalculation">
            <summary>
            The CheckResultsAfterCalculation interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICheckResultsAfterCalculation.Run">
            <summary>
            Opens tab 'Fluid Properties' and checks whether 'Reference viscosity' represents a float value.
            Then opens tab 'Results' and checks whether 'Calculation Model', 'Coefficient X1, 'Coefficient X2' and 'Reference Temperature' have valid values.
            Finally opens tab 'Analysis' and makes a screenshot of the module
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICloseModule">
            <summary>
            Interface for Flow CloseModule
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICloseModule.Run">
            <summary>
                Close module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ICloseModule.Run(System.Int32)">
            <summary>
            Close module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module closing.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IConfigureFluidPropertiesParameter">
            <summary>
            The ConfigureFluidPropertiesParameter interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IConfigureFluidPropertiesParameter.Run(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Configures the parameter of the tab 'Fluid Properties'. Use string.empty if you want to skip this parameter.
            </summary>
            <param name="dynamicViscosityUnit">
            The dynamic viscosity unit. Use string.empty if you want to skip this parameter.
            </param>
            <param name="temperatureUnit">
            The temperature unit. Use string.empty if you want to skip this parameter.
            </param>
            <param name="referenceTemperature">
            The reference temperature. Use string.empty if you want to skip this parameter.
            </param>
            <param name="firstColumn">
            The first column. Use string.empty if you want to skip this parameter.
            </param>
            <param name="secondColumn">
            The second column. Use string.empty if you want to skip this parameter.
            </param>
            <returns>
            <c>true</c> if all parameter are configured successfully, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IExport">
            <summary>
            Interface for Flow Export
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IExport.Run">
            <summary>
            Exports the Viscosity data to a file in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IExport.Run(System.String)">
            <summary>
            Exports Viscosity data with user given filename
            </summary>
            <param name="filename">
            Filename for Viscosity Data
            </param>
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IImport">
            <summary>
            Interface for Flow Import
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IImport.Run">
            <summary>
            Imports the Viscosity data from a file in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IImport.Run(System.String)">
            <summary>
            Imports Viscosity data via toolbar icon
            </summary>
            <param name="filename">
            filename (and path)of dataset which should be imported
            </param>
            <returns>
            true, if file was imported succesfully; false, if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ILoad">
            <summary>
            Interface of Load
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ILoad.Run">
            <summary>
            Loads the Viscosity data from a file in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ILoad.Run(System.String)">
            <summary>
            load a file with specified file name, check whether user notification message in status bar contains "Data loaded successfully"
            </summary>
            <param name="fileName">
            User specified filename
            </param>
            <returns>
            true: if loading was successful
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.INew">
            <summary>
            Interface for New
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.INew.Run">
            <summary>
            Clears Viscosity data via New button
            </summary>
            <returns>true: if Viscosity data is cleared; false: if an error occurred</returns>        
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOffline">
            <summary>
                Provides methods for flow IOpenModuleOffline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOffline.Run">
            <summary>
                Methods to Open module
            </summary>
            <returns>
                <br>True: if call worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOffline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
            <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOnline">
            <summary>
            Interface for Flow OpenModuleOnline
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOnline.Run">
            <summary>
                Open module via frame menu within a default time
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IOpenModuleOnline.Run(System.Int32)">
            <summary>
            Open module via frame menu within a default time
            </summary>
            <param name="timeoutInMilliseconds">
            The timeout In Milliseconds for the module opening.
            </param>
            <returns>
            <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ISave">
            <summary>
            Interface for Save methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ISave.Run">
            <summary>
                Saves current Viscosity data via Save button
            </summary>
            <returns>
                true: if call worked fine
                false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ISaveAs">
            <summary>
             Interface for SaveAs Methods
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ISaveAs.Run(System.String)">
            <summary>
            Saves file under given filename, replaces already existing files with same filename
                FILE WATCHER will check if file has been created or modified
                Default on drive C:
            </summary>
            <param name="fileName">
            Filename under which file is saved
            </param>
            <returns>
            true: if file was saved successful
                false: if an error occurred
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.ISaveAs.Run">
            <summary>
            Saves the Viscosity data to a file in the report folder.
            </summary>        
            <returns>
            true: if file is saved; false: if an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IWrite">
            <summary>
            Interface of Write
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IWrite.Run">
            <summary>
            Writes coefficients to device
            </summary>
            <returns>true: if writing finished successfully; false: if an error occurred</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Flows.IWrite.Run(System.Boolean)">
            <summary>
            Writes coefficients to device OR verifies the correct behavior in case of the software option not activated
            </summary>
            <param name="isSoftwareOptionEnabled">default is true; Only use 'false' if the software option 'Viscosity' is not activated.</param>
            <returns><c>true</c> if writing succeeded or correct warning message is shown, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ICloseModule">
            <summary>
                Description of ICloseModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ICloseModule.ViaWindow(System.String)">
            <summary>
                Close module via tab at related tab control
            </summary>
            <param name="moduleToClose">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IEditParameter">
            <summary>
                Provides methods for editing different parameter types
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IEditParameter.SetParameterValue(Ranorex.Core.Element,System.String)">
            <summary>
                Set a specific control to a specific value
            </summary>
            <param name="element">control to set</param>
            <param name="value">value to set</param>
            <returns>
                <br>True: if parameter was set</br>
                <br>Null: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IEditParameter.GetParameterValue(Ranorex.Core.Element)">
            <summary>
                Get value of a specific control
            </summary>
            <param name="element">control to get the value from</param>
            <returns>
                <br>String: if everything worked fine</br>
                <br>Emptry String: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable">
            <summary>
            The GetValuesFromTable interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.AllValues">
            <summary>
            Gets all values from table and stores them in a list.
            </summary>
            <returns>List with all table values.</returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.PrintAllValuesInReport">
            <summary>
            Prints all linearization table values in report.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IGetValuesFromTable.SingleValue(System.Int32,System.Int32)">
            <summary>
            Returns the value for a specified row and column
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <returns>
            The value for the row and column.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IOpenModule">
            <summary>
                Description of IOpenModule.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu">
            <summary>
                Open module via frame menu
            </summary>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.IOpenModule.ViaMenu(System.String)">
            <summary>
                Open module via frame menu within a specific time
            </summary>
            <param name="moduleToOpen">Module name, if it differs from intended name</param>
            <returns>
                <br>True: if everything worked fine</br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ISelectTab">
            <summary>
            
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ISelectTab.Run(System.Int32)">
            <summary>
                Select a tab with specified tabindex
            </summary>
            <param name="index">Tabindex to select</param>
            <returns>
                <br>True: if selection worked </br>
                <br>False: if an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ISetTableValues">
            <summary>
            The SetTableValues interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ISetTableValues.SetValues(System.Collections.Generic.List{System.String})">
            <summary>
            Sets all table values provided from a list.
            </summary>
            <param name="inputValues">
            The input values.
            </param>
            <returns>
            <c>true</c> if values have been set, <c>false</c> otherwise.
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties">
            <summary>
            
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.ComboBoxAssignmentColumn1">
            <summary>
                Combobox Assignment Column 1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.ComboBoxAssignmentColumn2">
            <summary>
                Combobox Assignment Column 2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.ComboBoxReferenceTemperatureUnit">
            <summary>
                ComboBox Reference Temperature Unit
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.ComboBoxSpreadsheet">
            <summary>
                ComboBox Spreadsheet
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.ComboBoxViscosityUnit">
            <summary>
                ComboBox Viscosity Unit
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.NumericTextBoxReferenceTemperature">
            <summary>
                Numeric TextBox Reference Temperature
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabFluidProperties.EditControlReferenceViscosity">
            <summary>
               EditControl Reference Viscosity
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults">
            <summary>
            The TabResults interface.
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlCalculationModel">
            <summary>
                Edit Control Calculation Model
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlCoefficientX1">
            <summary>
                EditControlCoefficientX1
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlCoefficientX2">
            <summary>
                EditControlCoefficientX2
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlReferenceTemperature">
            <summary>
                EditControlReferenceTemperature
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlTemperatureUnit">
            <summary>
                EditControlTemperatureUnit
            </summary>
        </member>
        <member name="P:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.EditControlViscosityUnit">
            <summary>
                EditControlViscosityUnit
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.CompareCoefficients(System.String,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring is not identical</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITabResults.CompareCoefficients(System.Double,System.String[])">
            <summary>
            Compares all calculated coefficients against user given coefficients
            </summary>
            <param name="accuracy">
            maximum allowed difference between two coefficients
            </param>
            <param name="expectedCoefficients">
            string[] with user given coefficients
            </param>
            <returns>
            <br>true: if all coefficients are identical</br>
                <br>false: if one paring isnt identical</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule">
            <summary>
            The TakeScreenshotOfModule interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Execution.ITakeScreenshotOfModule.Run">
            <summary>
            Runs this instance.
            </summary>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady">
            <summary>
                Interface for IsModuleReady
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <param name="button">Button to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOfflineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Adapter)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Button)">
            <summary>
                Checks if module (online) is ready
            </summary>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IIsModuleReady.IsModuleOnlineReady(Ranorex.Core.Element)">
            <summary>
                Checks if module (offline) is ready
            </summary>
            <param name="element">Element to check</param>
            <returns>
                <br>True: if module is ready</br>
                <br>False: if module is not ready</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing">
            <summary>
                Interface for ModuleOpeningAndClosing
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleAlreadyOpened">
            <summary>
            Validates that a module is already open or not (brings module to foreground if it is already open)
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleClosed">
            <summary>
            Validates that a module is closed
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.IsModuleOpened">
            <summary>
            Validates that a module is open
            </summary>
            <returns>
            The <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsClosed(System.Int32)">
            <summary>
            Validation if module is closed within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module must be closed
            </param>
            <returns>
            <br>True: if module is closed</br>
                <br>False: if module is not closed</br>
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IModuleOpeningAndClosing.WaitUntilModuleIsOpen(System.Int32)">
            <summary>
            Validation if module is opened within a specified time
            </summary>
            <param name="timeOutInMilliseconds">
            Time within module should be opened
            </param>
            <returns>
            <br>True: if module is opened in time</br>
                <br>False: if module is not opened in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady">
            <summary>
                Description of IWaitUntilModuleOfflineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOfflineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (offline) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady">
            <summary>
                Description of IWaitUntilModuleOnlineIsReady.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.ApplicationArea.MainView.Validation.IWaitUntilModuleOnlineIsReady.Run(System.Int32)">
            <summary>
                Validation if module (online) is ready within a specified time
            </summary>
            <param name="timeOutInMilliseconds">Time within module should be ready</param>
            <returns>
                <br>True: if module is ready in time</br>
                <br>False: if module is not ready in time</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenExport">
            <summary>
                Description of IOpenExport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenExport.ViaIcon">
            <summary>
                Start export via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenHelp">
            <summary>
                Description of IOpenHelp.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenHelp.ViaIcon">
            <summary>
                Start help via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenImport">
            <summary>
                Description of IOpenImport.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenImport.ViaIcon">
            <summary>
                Start import via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenLoad">
            <summary>
                Description of IOpenLoad.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenLoad.ViaIcon">
            <summary>
                Start load via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenNew">
            <summary>
                Description of IOpenNew.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenNew.ViaIcon">
            <summary>
                Start new via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenSave">
            <summary>
                Description of IOpenSave.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenSave.ViaIcon">
            <summary>
                Start save via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs">
            <summary>
                Description of IOpenSaveAs.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IOpenSaveAs.ViaIcon">
            <summary>
                Start save as via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IRunCalculate">
            <summary>
                Description of IRunCalculate.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IRunCalculate.ViaIcon">
            <summary>
                Start calculate via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IRunWrite">
            <summary>
                Description of IRunWrite.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Execution.IRunWrite.ViaIcon">
            <summary>
                Start write via related toolbar-icon
            </summary>
            <returns>
                <br>True: If call worked fine</br>
                <br>False: If an error occurred</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsCalculateButtonInactive">
            <summary>
            The IsCalculateButtonInactive interface.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsCalculateButtonInactive.Run">
            <summary>
            Checks whether button 'Calculate' is inactive or not
            </summary>
            <returns><c>true</c> if inactive, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished">
            <summary>
                Description of IsCalculationFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsCalculationFinished.Run">
            <summary>
                Checks if calculating is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished">
            <summary>
                Description of IsWriteFinished.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.MenuArea.Toolbar.Validation.IIsWriteFinished.Run">
            <summary>
                Checks if writing to device is finished
            </summary>
            <returns>
                true: if write button is enabled and user notification message is shown
                false: if either write button is not enabled or message is not shown
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected">
            <summary>
                Description of IsDtmConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IIsDtmConnected.Run">
            <summary>
                Determines whether dtm is online
            </summary>
            <returns>
                true: if DTM is online
                false: if DTM is offline or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected">
            <summary>
                Description of IsDTMDisconnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IIsDtmDisconnected.Run">
            <summary>
                Determines whether dtm is offline
            </summary>
            <returns>
                true: if DTM is offline
                false: if DTM is online or an error occurred
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected">
            <summary>
                Description of IWaitUntilDtmIsConnected.
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsConnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is connected</br>
                <br>False: if module is not connected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected">
            <summary>
            Interface for WaitUntilDtmIsDisconnected
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Statusbar.Validation.IWaitUntilDtmIsDisconnected.Run(System.Int32)">
            <summary>
                Wait until DTM connection is established and shown by GUI
            </summary>
            ///
            <param name="timeOutInMilliseconds">Time until action must be performed</param>
            <returns>
                <br>True: if module is disconnected</br>
                <br>False: if module is not disconnected</br>
            </returns>
        </member>
        <member name="T:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages">
            <summary>
            Interface for Validation CheckUserNotificationMessages
            </summary>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsError">
            <summary>
                Scans the user notification messages in the status area for error messages
            
            </summary>
            <returns>
                true: 	if the text contains any of the keywords  
                false:  if the text doesnt contain any of the keywords
            </returns>
        </member>
        <member name="M:EH.PCPS.TestAutomation.DeviceFunctionInterfaces.CoDIA.Viscosity.Functions.StatusArea.Usermessages.Validation.ICheckUserNotificationMessages.ContainsString(System.String)">
            <summary>
            Checks whether the usermessage contains a particular string
            </summary>
            <param name="value">String to look for</param>
            <returns>
            true: if the usermessage contains the string
            false: if string is not found
            </returns>
        </member>
    </members>
</doc>
