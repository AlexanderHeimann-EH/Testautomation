<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- Ensures that if this file changes it forces a rebuild -->
  <PropertyGroup>
    <MSBuildAllProjects>
        $(MSBuildAllProjects);$(MSBuildThisFileFullPath)
    </MSBuildAllProjects>
  </PropertyGroup>


  <PropertyGroup>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <!-- The version number to compare with existing install. -->
    <MsiVersion Condition="$(MsiVersion)==''">0.7.4100.000</MsiVersion>
    <!-- The version number that will be displayed to users. -->
    <ReleaseVersion Condition="$(ReleaseVersion)==''">0.7</ReleaseVersion>
    <!-- When true, increases build restrictions to ensure complete public releases -->
    <ReleaseBuild Condition="'$(ReleaseBuild)' == ''">false</ReleaseBuild>

    <!-- The default Platform value is specified in the imports below -->
    
    <RunFXCop Condition="'$(RunFXCop)' == ''">false</RunFXCop>
    <RunStyleCop Condition="'$(RunStyleCop)' == ''">false</RunStyleCop>

    <CodeCoverageEnabled Condition="'$(CodeCoverageEnabled)'==''">true</CodeCoverageEnabled>

    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">10.0</VisualStudioVersion>
    <VSTarget Condition="$(VSTarget)=='' and '$(VisualStudioVersion)'=='14.0'">14.0</VSTarget>
    <VSTarget Condition="$(VSTarget)=='' and '$(VisualStudioVersion)'=='12.0'">12.0</VSTarget>
    <VSTarget Condition="$(VSTarget)=='' and '$(VisualStudioVersion)'=='11.0'">11.0</VSTarget>
    <VSTarget Condition="$(VSTarget)==''">10.0</VSTarget>
    <BuildingInsideVisualStudio Condition="'$(BuildingInsideVisualStudio)' == ''">false</BuildingInsideVisualStudio>
    
    <TargetFrameworkVersion Condition="'$(TargetFrameworkVersion)' == ''">v4.5</TargetFrameworkVersion>
    
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>

    <BuildRoot Condition="'$(BuildRoot)' == ''">$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), build.root))</BuildRoot>
    <BuildRoot Condition="!HasTrailingSlash($(BuildRoot))">$(BuildRoot)\</BuildRoot>
    <TargetsPath>$(BuildRoot)Build</TargetsPath>

    <!-- BuildOutputRoot contains all build files.
    
    Rather than customizing OutputPath or IntermediateOutputPath in projects,
    $(OutputPathSuffix) and $(IntermediateOutputPathSuffix) should be set.
    -->
    <BuildOutputRoot Condition="'$(BuildOutputRoot)' == ''">$(BuildRoot)\BuildOutput\$(Configuration)$(VSTarget)\</BuildOutputRoot>
    <BuildOutputRoot Condition="!HasTrailingSlash($(BuildOutputRoot))">$(BuildOutputRoot)\</BuildOutputRoot>

    <OutputPathSuffix Condition="'$(OutputPathSuffix)' != '' and !HasTrailingSlash($(OutputPathSuffix))">$(OutputPathSuffix)\</OutputPathSuffix>
    <OutputPath Condition="'$(OutputPath)' == ''">$(BuildOutputRoot)$(OutputPathSuffix)</OutputPath>
    <OutputPath Condition="!HasTrailingSlash($(OutputPath))">$(OutputPath)\</OutputPath>

    <IntermediateOutputPathSuffix Condition="'$(IntermediateOutputPathSuffix)' != '' and !HasTrailingSlash($(IntermediateOutputPathSuffix))">$(IntermediateOutputPathSuffix)\</IntermediateOutputPathSuffix>
    <IntermediateOutputPath Condition="'$(IntermediateOutputPath)' == ''">$(BuildOutputRoot)$(IntermediateOutputPathSuffix)</IntermediateOutputPath>
    <IntermediateOutputPath Condition="!HasTrailingSlash($(IntermediateOutputPath))">$(IntermediateOutputPath)\</IntermediateOutputPath>

    <OutDir>$(OutputPath)</OutDir>
    <IntDir>$(IntermediateOutputPath)</IntDir>

    <!-- Allows assemblies to specify their own version -->
    <SuppressCommonAssemblyVersion Condition="'$(SuppressCommonAssemblyVersion)' == ''">false</SuppressCommonAssemblyVersion>
    
    <!-- Enables VS SDK build steps.
    
    Set CreateVsixContainer for projects that create a .vsix file.
    Set UseVSSDKTemplateOnly for projects that build templates but no code.
    -->
    <UseVSSDK Condition="'$(UseVSSDK)' == ''">false</UseVSSDK>
    <UseVSSDKTemplateOnly Condition="'$(UseVSSDKTemplateOnly)' == ''">false</UseVSSDKTemplateOnly>
    <!-- The location to copy VSIX contents so they can be signed and zipped -->
    <CopyVsixExtensionRoot Condition="'$(CopyVsixExtensionRoot)' == ''">$(BuildOutputRoot)VSIX\</CopyVsixExtensionRoot>

    <!-- These targets are invoked to find VSIX contents on all projects.
    
    The files found are used for deployment to the Experimental hive and
    creation of .vsix files.
    -->
    <IncludeVsixItemsFromTargets Condition="'$(IncludeVsixItemsFromTargets)' == '' and '$(Configuration)' == 'Debug'">BuiltProjectOutputGroup;DebugSymbolsProjectOutputGroup</IncludeVsixItemsFromTargets>
    <IncludeVsixItemsFromTargets Condition="'$(IncludeVsixItemsFromTargets)' == ''">BuiltProjectOutputGroup</IncludeVsixItemsFromTargets>
    <!-- Copies entire VSIX contents to the output directory. -->
    <CopyLocalReferenceVsixItems Condition="'$(CopyLocalReferenceVsixItems)' == ''">false</CopyLocalReferenceVsixItems>
  </PropertyGroup>



  <PropertyGroup>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
    <TreatWarningsAsErrors Condition="'$(TreatWarningsAsErrors)' == ''">true</TreatWarningsAsErrors>
    <!-- Suppress warning about multiply defined AssemblyVersionInfo -->
    <NoWarn>436</NoWarn>
    <RunCodeAnalysis>$(RunFXCop)</RunCodeAnalysis>
    <StyleCopEnabled>$(RunStyleCop)</StyleCopEnabled>

    <ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>None</ResolveAssemblyWarnOrErrorOnTargetArchitectureMismatch>

    <DevEnvDir>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\$(VSTarget)', 'InstallDir', null, RegistryView.Registry32))\</DevEnvDir>
    <VSSDKDir>$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\Software\Microsoft\VisualStudio\VSIP\$(VSTarget)', 'InstallDir', null, RegistryView.Registry32))\</VSSDKDir>
  </PropertyGroup>

  <PropertyGroup>
    <!--
    Read the update version for the build machine so we can exclude
    features that require a particular update to build.
    
    See language-specific settings files for feature preprocessor
    definitions.
    -->
    <_VSUpdateVersion Condition="$(VSUpdateVersion)=='' and $(VisualStudioVersion)!='10.0'">$([MSBuild]::GetRegistryValueFromView('HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\DevDiv\vs\Servicing\$(VSTarget)\devenv', 'UpdateVersion', null, RegistryView.Registry32))</_VSUpdateVersion>
    <VSMajorVersion Condition="$(VSMajorVersion)=='' and $(_VSUpdateVersion)!=''">$([System.Int32]::Parse($(_VSUpdateVersion.Substring(0, $(_VSUpdateVersion.IndexOf(`.`))))))</VSMajorVersion>
    <VSUpdateVersion Condition="$(VSUpdateVersion)=='' and $(_VSUpdateVersion)!=''">$([System.Int32]::Parse($(_VSUpdateVersion.Substring($([MSBuild]::Add(1, $(_VSUpdateVersion.LastIndexOf(`.`))))))))</VSUpdateVersion>
    
    <!-- Features default to true for release builds -->
    <FeatureAzureRemoteDebug>$(ReleaseBuild)</FeatureAzureRemoteDebug>
    
    <!-- Enable features based on VS versions -->
    <FeatureAzureRemoteDebug Condition="$(VSMajorVersion) > 12 or ($(VSMajorVersion) == 12 and $(VSUpdateVersion) >= 30723)">true</FeatureAzureRemoteDebug>
  </PropertyGroup>
  
  <ItemDefinitionGroup>
    <!-- By default, project references are never copied.
    
    Setting Private to true will treat the reference as a critical dependency,
    but files are only copied if CopyLocalReferenceVsixItems is also true, or if
    a .vsix file is generated.
    -->
    <ProjectReference>
      <Private>false</Private>
    </ProjectReference>
    <ProjectReference2>
      <Visible>false</Visible>
      <ReferenceOutputAssembly>false</ReferenceOutputAssembly>
      <BuildReference>true</BuildReference>
      <IncludeInVSIX>true</IncludeInVSIX>
    </ProjectReference2>
  </ItemDefinitionGroup>

  <Import Project="$(TargetsPath)\Common.Build.CSharp.settings" Condition="'$(MSBuildProjectExtension)' == '.csproj' or '$(MSBuildProjectExtension)' == '.tmp_proj'" />
  <Import Project="$(TargetsPath)\Common.Build.Cpp.settings" Condition="'$(MSBuildProjectExtension)' == '.vcxproj'" />
  <Import Project="$(TargetsPath)\Common.Build.Wix.settings" Condition="'$(MSBuildProjectExtension)' == '.wixproj'" />
  <Import Project="$(TargetsPath)\CodeCoverage.proj" />

  <ItemGroup>
    <CodeAnalysisDictionary Include="$(BuildRoot)\Build\CustomDictionary.xml" />
  </ItemGroup>

  <PropertyGroup>
    <CodeAnalysisRuleSet>$(BuildRoot)\Build\xTVS.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
</Project>
